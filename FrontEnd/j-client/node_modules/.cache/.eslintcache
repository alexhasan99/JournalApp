[{"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\index.js":"1","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\App.js":"2","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\reportWebVitals.js":"3","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\DoctorPage.tsx":"4","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\PatientPage.tsx":"5","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\RegisterForm.tsx":"6","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\UserSession.tsx":"7","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\Home.tsx":"8","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\LoginPage.tsx":"9","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\PrivateRoute.tsx":"10","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\SelectedPatientPage.tsx":"11","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\utils\\mockData.js":"12","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\DrawingForm.tsx":"13","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\services\\ApiServices.tsx":"14","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\PatientSearchForm.tsx":"15","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\HttpClient.js":"16","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\keycloak.js":"17","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\Login.js":"18","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\TestLogin.js":"19","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\styles.js":"20"},{"size":552,"mtime":1709233957794,"results":"21","hashOfConfig":"22"},{"size":2245,"mtime":1710286671078,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1709233957883,"results":"24","hashOfConfig":"22"},{"size":8373,"mtime":1710293861831,"results":"25","hashOfConfig":"22"},{"size":10943,"mtime":1709233958097,"results":"26","hashOfConfig":"22"},{"size":2946,"mtime":1709233958185,"results":"27","hashOfConfig":"22"},{"size":739,"mtime":1709233958236,"results":"28","hashOfConfig":"22"},{"size":5220,"mtime":1710282323980,"results":"29","hashOfConfig":"22"},{"size":2579,"mtime":1709233958063,"results":"30","hashOfConfig":"22"},{"size":1135,"mtime":1709233958153,"results":"31","hashOfConfig":"22"},{"size":12563,"mtime":1710294920272,"results":"32","hashOfConfig":"22"},{"size":1360,"mtime":1709233958328,"results":"33","hashOfConfig":"22"},{"size":12131,"mtime":1709233958003,"results":"34","hashOfConfig":"22"},{"size":10882,"mtime":1710705553355,"results":"35","hashOfConfig":"22"},{"size":2580,"mtime":1710282323980,"results":"36","hashOfConfig":"22"},{"size":96,"mtime":1710282323980,"results":"37","hashOfConfig":"22"},{"size":1000,"mtime":1710705629267,"results":"38","hashOfConfig":"22"},{"size":5009,"mtime":1710284472360,"results":"39","hashOfConfig":"22"},{"size":2967,"mtime":1710287798789,"results":"40","hashOfConfig":"22"},{"size":1287,"mtime":1710288563839,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"87mypm",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"61"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\index.js",[],[],["112","113","114","115","116","117"],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\App.js",["118","119","120","121","122","123"],[],"import React, {useContext, useState} from 'react';\r\nimport LoginPage from './components/LoginPage';\r\nimport PatientPage from './components/PatientPage';\r\nimport DoctorPage from './components/DoctorPage';\r\nimport RegisterForm from \"./components/RegisterForm\";\r\nimport {BrowserRouter, Link, Navigate, Route, Router, Routes, useNavigate} from \"react-router-dom\";\r\nimport Home from \"./components/Home\";\r\nimport {UserProvider} from \"./components/UserSession\";\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\nimport SelectedPatientPage from \"./components/SelectedPatientPage\";\r\n//import Login from './Login';\r\nimport Login from './TestLogin';\r\nfunction App() {\r\n\r\n    let user = null;\r\n    if (sessionStorage.length > 0) {\r\n        const storedUser = sessionStorage.getItem('currentUserLoggedIn');\r\n        user = storedUser ? JSON.parse(storedUser) : null;\r\n        console.log(\"User: \" + user?.userId);\r\n    }\r\n\r\n\r\n    \r\n\r\n   return (\r\n        <BrowserRouter>\r\n            <UserProvider>\r\n                <div>\r\n                    <h1>My App</h1>\r\n                    <ul>\r\n                        <li><Link to=\"/\">Home</Link></li>\r\n                        <li><Link to={`/patient/${user?.userId}`}>Patient Page</Link></li>\r\n                        <li><Link to=\"/staff\">Doctor Page</Link></li>\r\n                        <li><Link to=\"/registerForm\">Register</Link></li>\r\n                    </ul>\r\n                    <Routes>\r\n                    <Route path=\"/\" element={<Login />} />\r\n                    <Route path=\"/home\" element={<Home />} />\r\n                        <Route path=\"/patient/:patientId\" element={<PrivateRoute allowedUserTypes={['PATIENT']} ><PatientPage /></PrivateRoute>} />\r\n                        <Route path=\"/staff/selectedPatient/:patientId\" element={<PrivateRoute  allowedUserTypes={['STAFF']} ><SelectedPatientPage /></PrivateRoute>} />\r\n                        <Route path=\"/staff/:staffId\"  element={<PrivateRoute  allowedUserTypes={['STAFF']} ><DoctorPage /></PrivateRoute>}/>\r\n                        <Route path=\"/registerForm\" element={<RegisterForm />} />\r\n                    </Routes>\r\n                </div>\r\n            </UserProvider>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\DoctorPage.tsx",["124","125","126","127"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ApiService from '../services/ApiServices';\r\nimport {Patient, Msg, PatientForSearch} from \"../interface/interface\";\r\nimport ApiServices from \"../services/ApiServices\";\r\nimport PatientSearchForm from './PatientSearchForm';\r\nimport { styles } from './styles';\r\n\r\ninterface MessageItemProps {\r\n    message: Msg;\r\n    handleReply: (receiverId: number, replyContent: string) => void;\r\n\r\n}\r\n\r\nconst MessageItem: React.FC<MessageItemProps> = ({ message, handleReply }) => {\r\n    const [newReplyContent, setNewReplyContent] = useState('');\r\n    const [senderName, setSenderName] = useState('');\r\n    const [messageSent, setMessageSent] = useState(false);\r\n\r\n    const handleSendReply = async () => {\r\n        try {\r\n            // Call handleReply and pass the receiver's userId and newReplyContent\r\n            await handleReply(message.sender, newReplyContent);\r\n            setMessageSent(true); // Set message sent to true after successful send\r\n            alert(\"Message successfully sent!\");\r\n            setNewReplyContent(''); // Clear the reply input after sending\r\n        } catch (error) {\r\n            console.error('Error sending message:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchSenderName = async () => {\r\n            try {\r\n                console.log(message.sender)\r\n                const senderData = await ApiServices.getPatientByUserId(message.sender);\r\n                if (senderData) {\r\n                    setSenderName(senderData.name || 'Unknown');\r\n                } else {\r\n                    setSenderName('Unknown');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching sender data:', error);\r\n                setSenderName('Unknown');\r\n            }\r\n        };\r\n\r\n        fetchSenderName();\r\n    }, [message.sender]);\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ padding: '10px', borderBottom: '1px solid #eee' }}>\r\n            <p><strong>Content:</strong> {message.messageText}</p>\r\n            <p><strong>Sender:</strong> {senderName}</p>\r\n            {!messageSent && (\r\n                <div>\r\n                    <h4>Reply</h4>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={newReplyContent}\r\n                        onChange={(e) => setNewReplyContent(e.target.value)}\r\n                        placeholder=\"Type your reply...\"\r\n                        style={styles.input}\r\n                    />\r\n                    <button onClick={handleSendReply} style={styles.button}>Send Reply</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DoctorPage = () => {\r\n    const [patients, setPatients] = useState<Patient[]>([]);\r\n    const [messages, setMessages] = useState<Msg[]>([]);\r\n    const [getAllSentMessages, setAllSentMessages] = useState<Msg[]>([]);\r\n    const [getAllReceviedMessages, setAllReceviedMessages] = useState<Msg[]>([]);\r\n    const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\r\n    const [searchedPatients, setSearchedPatients] = useState<PatientForSearch[]>([]); // State för sökta patienter\r\n\r\n\r\n    const fetchMessages = async (userId: number) => {\r\n        try {\r\n            console.log(userId)\r\n            ApiServices.getAllSentMessagesForUser(userId).then(setAllSentMessages);\r\n            ApiServices.getAllReceivedMessagesForUser(userId).then(setAllReceviedMessages);\r\n            console.log(getAllSentMessages)\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    };\r\n    const handleSearchComplete = (searchResults: PatientForSearch[]) => {\r\n        console.log(searchResults)\r\n\r\n        setSearchedPatients(searchResults); // Spara sökresultaten i state\r\n        //console.log(searchResults)\r\n    };\r\n    useEffect(() => {\r\n        // Fetch list of patients when the component mounts\r\n        const fetchPatients = async () => {\r\n            try {\r\n                const fetchedPatients = await ApiService.getPatients(); // Fetch patients from API\r\n                setPatients(fetchedPatients); // Set the fetched patients in state\r\n            } catch (error) {\r\n                console.error('Error fetching patients:', error);\r\n            }\r\n        };\r\n\r\n        const userIdFromSession = sessionStorage.getItem('currentUserLoggedIn');\r\n        if (userIdFromSession) {\r\n            const { userId } = JSON.parse(userIdFromSession);\r\n            fetchMessages(userId); // Fetch messages for the logged-in doctor (using userId)\r\n        }\r\n        fetchPatients();\r\n    }, []);\r\n\r\n    const handleReply = async (receiverId: number, replyContent: string) => {\r\n        try {\r\n            if (replyContent) {\r\n                const userIdFromSession2 = sessionStorage.getItem('currentUserLoggedIn');\r\n                let senderId = 0;\r\n                if (userIdFromSession2) {\r\n                    const { userId } = JSON.parse(userIdFromSession2);\r\n                    senderId = userId;\r\n                }\r\n                // Here, you can set the selectedPatient based on the receiverId\r\n                const selectedPatient = patients.find((patient) => patient.id === receiverId);\r\n                setSelectedPatient(selectedPatient || null);\r\n\r\n                const messageData = {\r\n                    messageText: replyContent,\r\n                    timeStamp: new Date().toISOString(),\r\n                    sender: senderId,\r\n                    receiver: receiverId,\r\n                };\r\n                await ApiService.createMessage(messageData);\r\n\r\n                // Fetch updated messages for the logged-in doctor after sending the reply\r\n                const userIdFromSession = sessionStorage.getItem('currentUserLoggedIn');\r\n                if (userIdFromSession) {\r\n                    const { userId } = JSON.parse(userIdFromSession);\r\n                    fetchMessages(userId);\r\n                }\r\n\r\n                //setNewMessageContent('');\r\n            } else {\r\n                console.error('Missing reply content or selected patient');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error sending message:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <h2>Messages</h2>\r\n            <ul style={styles.messageList}>\r\n                {getAllReceviedMessages.map((message) => (\r\n                    <li key={message.timeStamp} style={styles.messageItem}>\r\n                        <MessageItem message={message} handleReply={handleReply}/>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <h3>List of Patients</h3>\r\n            <ul style={styles.messageList}>\r\n                {patients.map((patient) => (\r\n                    <li key={patient.id} style={styles.messageItem}>\r\n                        {patient.firstname} - {patient.id}\r\n                        <Link to={`/staff/selectedPatient/${patient.id}`} style={styles.linkButton}>\r\n                            Select Patient\r\n                        </Link>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            \r\n            <div style={styles.searchSection}>\r\n                <h3>Search For Patients</h3>\r\n                <PatientSearchForm onSearchComplete={handleSearchComplete} />\r\n            </div>\r\n\r\n            <div style={styles.searchSection}>\r\n                <h3>Searched Patients</h3>\r\n                {searchedPatients.length > 0 ? (\r\n                    <ul style={styles.messageList}>\r\n                        {searchedPatients.map((patient) => (\r\n                            <li key={patient.lastName} style={styles.messageItem}>\r\n                                <strong>Name:</strong> {patient.firstName} {patient.lastName} <br/>\r\n                                <strong>Email:</strong> {patient.email} <br/>\r\n                                <strong>Gender:</strong> {patient.gender}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p>No patients found</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default DoctorPage;\r\n\r\n\r\n//<button onClick={() => handleReply(selectedPatient?.userId || 0)}>Reply</button>","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\PatientPage.tsx",["128","129","130","131","132","133","134","135","136","137"],[],"import React, {useState, useEffect, FormEvent, ChangeEvent} from 'react';\r\n// import ApiService from '../services/ApiServices'; // Du måste implementera denna service\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {EncounterForDisplay, Msg, Patient} from \"../interface/interface\";\r\nimport {StaffMember} from \"../interface/interface\";\r\nimport ApiServices from \"../services/ApiServices\";\r\nimport { number } from 'prop-types';\r\n\r\nconst PatientPage = () => {\r\n    const {patientId} = useParams<{ patientId?: string }>();\r\n    const [patientDetails, setPatientDetails] = useState<Patient>(); // Update 'any' with the actual patient details interface/type\r\n    const [doctorList, setStaffInfo] = useState<StaffMember[]>([]);\r\n    const [otherList, setOtherList] = useState<StaffMember[]>([]);\r\n    const [previousEncounters, setPreviousEncounters] = useState<EncounterForDisplay[]>([]);\r\n    const [expandedEncounterId, setExpandedEncounterId] = useState<number | null>(null);\r\n    const toggleExpand = (encounterId: number) => {\r\n        if (expandedEncounterId === encounterId) {\r\n            setExpandedEncounterId(null); // Collapse if already expanded\r\n        } else {\r\n            setExpandedEncounterId(encounterId); // Expand clicked encounter\r\n        }\r\n    };\r\n    const [userId, setUserId] = useState('');\r\n    const [patientInfo, setPatientInfo] = useState(null); // Använd för att lagra patientinformation\r\n    const [newDoctorMessage, setNewDoctorMessage] = useState('');\r\n    const [newOtherMessage, setNewOtherMessage] = useState('');\r\n    const [getAllSentMessages, setAllSentMessages] = useState<Msg[]>([]);\r\n    const [getAllReceviedMessages, setAllReceviedMessages] = useState<Msg[]>([]);\r\n    const [selectedDoctorId, setSelectedDoctorId] = useState('');\r\n    const [selectedDoctorName, setSelectedDoctorName] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (patientId) {\r\n            // Fetch patient details based on the patientId using an API call\r\n            ApiServices.getPatientById(parseInt(patientId)).then((data) => {\r\n                setPatientDetails(data);\r\n                const senderId = data?.user.id ?? 0; // Use nullish coalescing operator to handle undefined\r\n                setUserId(String(senderId)); // Update userId here once patientDetails are fetched\r\n            });\r\n            ApiServices.getAllEncountersByUserId(parseInt(patientId)).then(setPreviousEncounters);\r\n        }\r\n    }, [patientId]);\r\n\r\n    useEffect(() => {\r\n        const senderId = parseInt(userId);\r\n    if (senderId) {\r\n        ApiServices.getAllSentMessagesForUser(senderId).then(setAllSentMessages);\r\n        ApiServices.getAllReceivedMessagesForUser(senderId).then(setAllReceviedMessages);\r\n    }\r\n    }, [patientDetails]);\r\n\r\n    useEffect(() => {\r\n        ApiServices.getStaffInfo().then((data: StaffMember[]) => {\r\n            // Filtrera baserat på staffType\r\n            const doctors = data.filter(item => item.staffType === 'Doctor');\r\n            const others = data.filter(item => item.staffType !== 'Doctor');\r\n            \r\n            // Antag att setStaffInfo och setOtherList förväntar sig listor av StaffMember\r\n            setStaffInfo(doctors);\r\n            setOtherList(others);\r\n        });\r\n    },[]);\r\n\r\n    const sendMessage = (staffId: number, staffType: 'doctor' | 'other') => {\r\n\r\n        var senderId = patientDetails?.user.id\r\n        if (!senderId){\r\n            senderId = 0;\r\n        }\r\n\r\n        const message = {\r\n            timeStamp: new Date().toISOString(),\r\n            sender: senderId,\r\n            receiver: staffId,\r\n            messageText: staffType === 'doctor' ? newDoctorMessage : newOtherMessage,\r\n            // Add other necessary properties for the message\r\n        };\r\n\r\n        // Call the API to send the message\r\n        ApiServices.createMessage(message).then((response) => {\r\n            console.log('sucesses')\r\n            if (staffType === 'doctor') {\r\n                setNewDoctorMessage('');\r\n            } else {\r\n                setNewOtherMessage('');\r\n            }\r\n        });\r\n\r\n        console.log(message)\r\n    };\r\n\r\n\r\n    const formattedDate = (timestamp: string) => {\r\n        const date = new Date(timestamp);\r\n        const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };\r\n        return date.toLocaleDateString(undefined, options);\r\n    };\r\n\r\n    const formattedTime = (timestamp: string) => {\r\n        const date = new Date(timestamp);\r\n        return date.toLocaleTimeString();\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {patientDetails && (\r\n                <div>\r\n                    <h2>Patient Details</h2>\r\n                    <p>First Name: {patientDetails.firstname}</p>\r\n                    <p>Last Name: {patientDetails.lastname}</p>\r\n                    <p>Gender: {patientDetails.gender}</p>\r\n                    <p>Email: {patientDetails.email}</p>\r\n\r\n                    <div>\r\n                        <h3>Available Staff</h3>\r\n                        <div>\r\n                            <h4>Doctors</h4>\r\n                            <ul>\r\n                                {doctorList.map((doctor, index) => (\r\n                                    <li key={index}>\r\n                                        {/* Display doctor information */}\r\n                                        <p>First Name: {doctor.firstname}</p>\r\n                                        <p>Last Name: {doctor.lastname}</p>\r\n                                        <p>Email: {doctor.email}</p>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={newDoctorMessage}\r\n                                            onChange={(e) => setNewDoctorMessage(e.target.value)}\r\n                                            placeholder=\"Write your message\"\r\n                                        />\r\n                                        <button onClick={() => sendMessage(doctor.user.id, 'doctor')}>Message</button>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <h4>Others</h4>\r\n                            <ul>\r\n                                {otherList.map((other, index) => (\r\n                                    <li key={index}>\r\n                                        {/* Display other staff information */}\r\n                                        <p>First Name: {other.firstname}</p>\r\n                                        <p>Last Name: {other.lastname}</p>\r\n                                        <p>Email: {other.email}</p>\r\n                                        <p>Type: {other.staffType}</p>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={newOtherMessage}\r\n                                            onChange={(e) => setNewOtherMessage(e.target.value)}\r\n                                            placeholder=\"Write your message\"\r\n                                        />\r\n                                        <button onClick={() => sendMessage(other.user.id, 'other')}>Message</button>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Messages</h3>\r\n                        <h4>Sent Messages</h4>\r\n                        {getAllSentMessages\r\n            .map((msg, index) => (\r\n                            <div key={index}>\r\n                                <p>Content: {msg.messageText}</p>\r\n                                <p>Timestamp: {formattedDate(msg.timeStamp)}</p>\r\n                                <p>Sender: {msg.sender}</p>\r\n                                <p>Receiver: {msg.receiver}</p>\r\n                            </div>\r\n                        ))} \r\n                        <h4>Recevied Messages</h4>\r\n                        {getAllReceviedMessages\r\n            .map((msg, index) => (\r\n                            <div key={index}>\r\n                                <p>Content: {msg.messageText}</p>\r\n                                <p>Timestamp: {formattedDate(msg.timeStamp)}</p>\r\n                                <p>Sender: {msg.sender}</p>\r\n                                <p>Receiver: {msg.receiver}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div>\r\n                        <h3>Previous Encounters</h3>\r\n                        <div>\r\n                            {previousEncounters.map((encounter, index) => (\r\n                                <div key={index}>\r\n                                    <h4 onClick={() => toggleExpand(encounter.id)}>Encounter ⬇ {formattedDate(encounter.encounterDate)}</h4>\r\n                                    {expandedEncounterId === encounter.id && (\r\n                                        <div>\r\n                                            {/* Render encounter details */}\r\n                                            <p>Time: {formattedTime(encounter.encounterDate)}</p>\r\n                                            <p>EncounterId: {encounter.id}</p>\r\n                                            <p>Encounter Location: {encounter.location}</p>\r\n                                            <div>\r\n                                                <h4>Observations</h4>\r\n                                                <ul>\r\n                                                    {encounter.observations.map((observation, obsIndex) => (\r\n                                                        <li key={obsIndex}>\r\n                                                            {/* Render observation details */}\r\n                                                            <p>Type: {observation.type}</p>\r\n                                                            <p>Message: {observation.observationText}</p>\r\n                                                            <p>Observation Date: {formattedDate(observation.observationDate)}</p>\r\n                                                            {/* Other observation details */}\r\n                                                        </li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default PatientPage;\r\n",["138","139","140","141","142","143"],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\RegisterForm.tsx",[],[],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\UserSession.tsx",["144"],[],"import React, { createContext, useState } from 'react';\r\nimport {LoggedInUser, LoginUser} from \"../interface/interface\";\r\n\r\n\r\n\r\ninterface UserContextProps {\r\n    user: LoggedInUser | null;\r\n    setUser: React.Dispatch<React.SetStateAction<LoggedInUser | null>>;\r\n}\r\n\r\nexport const UserContext = createContext<UserContextProps>({\r\n    user: null,\r\n    setUser: () => null,\r\n});\r\n\r\nexport const UserProvider: React.FC = (props) => {\r\n    const { children } = props as { children: React.ReactNode }; // Define the children property\r\n\r\n    const [user, setUser] = useState<LoggedInUser | null>(null);\r\n\r\n    return (\r\n        <UserContext.Provider value={{ user, setUser }}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n};","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\Home.tsx",["145","146","147"],[],"import React, {useContext, useEffect, useState} from 'react';\r\nimport ApiService from '../services/ApiServices';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {Patient, PatientForPage, StaffMember, User} from \"../interface/interface\";\r\nimport {UserContext} from \"./UserSession\";\r\nimport ApiServices from \"../services/ApiServices\";\r\n\r\nconst LoginForm = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [userType, setUserType] = useState('');\r\n    const [userId, setUserId] = useState<number| undefined>();\r\n    const [patientDetails, setPatientDetails] = useState<PatientForPage>();\r\n    const [staffDetails, setStaffDetails] = useState<StaffMember>();\r\n    const navigate = useNavigate();\r\n    const { setUser } = useContext(UserContext);\r\n\r\n\r\n    useEffect(() => {\r\n        if (patientDetails) {\r\n            // Redirect after getting patient details\r\n            const parsedUserId = Number(patientDetails.id); // Convert to a number\r\n            if (!isNaN(parsedUserId)) {\r\n                setUserId(parsedUserId); // Update userId state\r\n                console.log(\"PatientDetails: \" + parsedUserId);\r\n                navigate(`/patient/${parsedUserId}`);\r\n            } else {\r\n                console.error(\"Invalid userId received from patientDetails:\", patientDetails.id);\r\n                // Handle the scenario where userId is not a valid number\r\n            }\r\n        }\r\n    }, [navigate, patientDetails]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (staffDetails) {\r\n            // Redirect after getting patient details\r\n            const parsedUserId = Number(staffDetails.id); // Convert to a number\r\n            if (!isNaN(parsedUserId)) {\r\n                setUserId(parsedUserId); // Update userId state\r\n                console.log(\"PatientDetails: \" + parsedUserId);\r\n                navigate(`/staff/${parsedUserId}`);\r\n            } else {\r\n                console.error(\"Invalid userId received from patientDetails:\", staffDetails.id);\r\n                // Handle the scenario where userId is not a valid number\r\n            }\r\n        }\r\n    }, [navigate, staffDetails]);\r\n\r\n\r\n    const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const user = { email, password, userType };\r\n            const loginSuccess = await ApiService.loginUser(user);\r\n            console.log('Login Sucess: ', user)\r\n\r\n            if (loginSuccess) {\r\n                let data;\r\n                if (userType === 'PATIENT') {\r\n                    data = await ApiService.getPatientByEmail(email);\r\n                    setPatientDetails(data);\r\n                } else if (userType === 'STAFF') {\r\n                    data = await ApiServices.getStaffByEmail(email);\r\n                    setStaffDetails(data);\r\n                    console.log(data)\r\n                }\r\n                if (data && data.id) {\r\n                    setUserId(data.id);\r\n                    setUser({ userId: data.id, email, userType });\r\n                    sessionStorage.setItem('currentUserLoggedIn', JSON.stringify({ id: data.id, email, userType, userId:data.user.id }));\r\n\r\n\r\n                    alert('Login successful!\\nYou wrote: ' + email + ', ' + userType);\r\n                } else {\r\n                    // Handle unexpected data format or missing data\r\n                    alert('Failed to fetch user data');\r\n                }\r\n            } else {\r\n                // Handle incorrect credentials\r\n                alert('Invalid username or password');\r\n            }\r\n        } catch (error) {\r\n            // Handle API fetch error\r\n            console.error('Error:', error);\r\n            alert('Error occurred during login');\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    const handleRegister = () => {\r\n        navigate(\"/registerForm\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <form onSubmit={handleLogin}>\r\n                <label>\r\n                    Email:\r\n                    <input\r\n                        type=\"text\"\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Password:\r\n                    <input\r\n                        type=\"password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Role:\r\n                    <select value={userType} onChange={(e) => setUserType(e.target.value)}>\r\n                        <option value=\"\">Select role</option>\r\n                        <option value=\"PATIENT\">Patient</option>\r\n                        <option value=\"STAFF\">Staff</option>\r\n                    </select>\r\n                </label>\r\n                <br />\r\n                <button type=\"submit\">Login</button>\r\n                <button onClick={handleRegister}>Register</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default LoginForm;\r\n\r\n","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\LoginPage.tsx",["148"],[],"import React, { ChangeEvent, FormEvent, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport {users} from \"../utils/mockData\";\r\n\r\nconst LoginPage = () => {\r\n    const navigate = useNavigate();\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loginStatus, setLoginStatus] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const handleUsernameChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setUsername(e.target.value);\r\n    };\r\n\r\n    const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        setIsLoading(true);\r\n        // Simulate loading for 1 second\r\n        setTimeout(() => {\r\n            const matchedUser = users.find(\r\n                (user) => user.username === username && user.password === password\r\n            );\r\n            if (matchedUser) {\r\n                setLoginStatus('Login successful');\r\n                // Add logic for successful login\r\n                if (matchedUser.role === 'patient') {\r\n                    // Redirect to patient page\r\n                    // Replace the URL with the correct route for the patient page\r\n                    navigate('/patient');\r\n                } else if (matchedUser.role === 'doctor') {\r\n                    // Redirect to doctor page\r\n                    // Replace the URL with the correct route for the doctor page\r\n                    navigate('/doctor');\r\n                }\r\n            } else {\r\n                setLoginStatus('Invalid credentials');\r\n                // Add logic for handling invalid credentials\r\n            }\r\n            setIsLoading(false);\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>Username:</label>\r\n                    <input type=\"text\" value={username} onChange={handleUsernameChange} />\r\n                </div>\r\n                <div>\r\n                    <label>Password:</label>\r\n                    <input type=\"password\" value={password} onChange={handlePasswordChange} />\r\n                </div>\r\n                <button type=\"submit\">Log in</button>\r\n            </form>\r\n            {isLoading && <p>Loading...</p>}\r\n            {loginStatus && <p>{loginStatus}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginPage;\r\n","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\PrivateRoute.tsx",["149","150","151"],[],"\r\nimport React, {useContext} from \"react\";\r\nimport {UserContext} from \"./UserSession\";\r\nimport {Navigate, Outlet, Route, useLocation} from \"react-router-dom\";\r\n//import {retrieveUserFromLocalStorage} from \"./retrieveUserFromLocalStorage\";\r\n\r\n\r\n\r\n\r\n// PrivateRoute component to guard routes\r\nconst PrivateRoute = ({  children, allowedUserTypes  } : any) => {\r\n    //const navigate = useNavigate();\r\n    //const { user } = useContext(UserContext);\r\n    //const storedUser = localStorage.getItem('currentUser');\r\n    const storedUser = sessionStorage.getItem('currentUserLoggedIn');\r\n    const user = storedUser ? JSON.parse(storedUser) : null;\r\n    let location = useLocation();\r\n\r\n    const isNotAuth = !user || !allowedUserTypes.includes(user.userType);\r\n\r\n    console.log(\"The usertype: \" + user?.userType);\r\n\r\n    if (isNotAuth) {\r\n        // Redirect to the unauthorized page if user is not authenticated\r\n        return <Navigate to=\"/unauthorized\"  state = {{from: location}}/>;\r\n    }\r\n\r\n\r\n    // Render the route's element if user is authenticated\r\n    return children ? children : <Outlet/>;\r\n};\r\n\r\nexport default PrivateRoute;","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\SelectedPatientPage.tsx",["152","153","154","155","156","157","158","159","160","161"],[],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\utils\\mockData.js",[],[],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\DrawingForm.tsx",["162","163","164","165","166","167"],[],"\r\nimport React, { useState, useRef, useEffect  } from 'react';\r\nimport ApiService from \"../services/ApiServices\";\r\nimport {ImageCreation, ImageDetails} from \"../interface/interface\"; // Assuming createImage function exists\r\n\r\n\r\n\r\nconst DrawingForm: React.FC = () => {\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [text, setText] = useState(''); // State for text input\r\n    const [textPosition, setTextPosition] = useState({ x: 100, y: 100 }); // Initial position\r\n    const [isDrawing, setIsDrawing] = useState(false);\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    const contextRef = useRef<CanvasRenderingContext2D | null>(null);\r\n    const [path, setPath] = useState<Point[]>([]);\r\n    const [undoStack, setUndoStack] = useState<Point[][]>([]);\r\n    const [redoStack, setRedoStack] = useState<Point[][]>([]);\r\n    const [selectedImageId, setSelectedImageId] = useState<number | null>(null);\r\n\r\n\r\n    interface Point {\r\n        x: number;\r\n        y: number;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        if (canvas) {\r\n            canvas.width = 600;  // Set the desired width\r\n            canvas.height = 500; // Set the desired height\r\n            canvas.style.width = '600px';  // Set the desired width\r\n            canvas.style.height = '500px'; // Set the desired height\r\n\r\n            const context = canvas.getContext('2d');\r\n            if (context) {\r\n\r\n                context.lineCap = 'round';\r\n                context.strokeStyle = 'black';\r\n                context.lineWidth = 5;\r\n                contextRef.current = context;\r\n            }\r\n        }\r\n\r\n    },[])\r\n\r\n    const startDrawing = ({ nativeEvent }: React.MouseEvent<HTMLCanvasElement>) => {\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        contextRef.current?.beginPath();\r\n        contextRef.current?.moveTo(offsetX, offsetY);\r\n        setIsDrawing(true);\r\n        setPath([{ x: offsetX, y: offsetY }]);\r\n    };\r\n\r\n    const finishDrawing = () => {\r\n        if (isDrawing) {\r\n            setUndoStack([...undoStack, path]);\r\n            setRedoStack([]);\r\n        }\r\n        setIsDrawing(false);\r\n    };\r\n\r\n    const draw = ({nativeEvent} : React.MouseEvent<HTMLCanvasElement>) => {\r\n        if(!isDrawing) {\r\n            return\r\n        }\r\n        if(contextRef.current){\r\n            const {offsetX, offsetY} = nativeEvent;\r\n            contextRef.current.lineTo(offsetX, offsetY)\r\n            contextRef.current.stroke()\r\n        }\r\n\r\n    }\r\n\r\n    const redrawCanvas = (paths: Point[][]) => {\r\n        contextRef.current?.clearRect(0, 0, 600, 500);\r\n\r\n        paths.forEach((path, index) => {\r\n            if (index < paths.length - 1) {\r\n                contextRef.current?.beginPath();\r\n                contextRef.current?.moveTo(path[0].x, path[0].y);\r\n                path.forEach(({ x, y }) => {\r\n                    contextRef.current?.lineTo(x, y);\r\n                    contextRef.current?.stroke();\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    const clearAll = () => {\r\n        contextRef.current?.clearRect(0, 0, 600, 500);\r\n        setUndoStack([]);\r\n        setRedoStack([]);\r\n    };\r\n\r\n\r\n    const handleSelectImage = async (imageId: number) => {\r\n        clearAll()\r\n        setSelectedImageId(imageId);\r\n\r\n        try {\r\n            const imageDetails = await ApiService.getImageById(imageId);\r\n            const imageData = imageDetails.imageData;\r\n\r\n            // Use refs to draw the image onto the canvas\r\n            if (contextRef.current) {\r\n                const img = new Image();\r\n                img.src = `data:image/png;base64,${imageData}`;\r\n                img.onload = () => {\r\n                    contextRef.current?.drawImage(img, 0, 0);\r\n                };\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching image data:', error);\r\n        }\r\n    };\r\n\r\n\r\n    const handleSave = async () => {\r\n        try {\r\n            if (canvasRef.current) {\r\n                const canvas = canvasRef.current;\r\n                const dataUrl = canvas.toDataURL('image/png');\r\n                const patientId = sessionStorage.getItem(\"patientId\");\r\n                const imageCreationData: ImageCreation = {\r\n                    id: 0,\r\n                    name: name,\r\n                    description: description,\r\n                    imageData: dataUrl.split(',')[1], // Extract base64 part of the data URL\r\n                    patientId: patientId !== null ? +patientId : 0, \r\n                };\r\n\r\n                // Send the drawing data to the server\r\n                await ApiService.createImage(imageCreationData);\r\n                console.log('Image saved successfully');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error saving image:', error);\r\n        }\r\n    };\r\n\r\n    const handleAddText = () => {\r\n        if (canvasRef.current) {\r\n            const ctx = canvasRef.current.getContext('2d');\r\n            if (ctx) {\r\n                ctx.font = '32px Arial'; // Set the font size and family\r\n                ctx.fillStyle = '#000000'; // Set the text color\r\n                ctx.fillText(text, textPosition.x, textPosition.y);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"drawing-form\">\r\n            <div>\r\n                <label>Name:</label>\r\n                <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label>Description:</label>\r\n                <input type=\"text\" value={description} onChange={(e) => setDescription(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label>Text:</label>\r\n                <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\r\n                <label>X Position:</label>\r\n                <input type=\"number\" value={textPosition.x} onChange={(e) => setTextPosition({ ...textPosition, x: parseInt(e.target.value) })} />\r\n                <label>Y Position:</label>\r\n                <input type=\"number\" value={textPosition.y} onChange={(e) => setTextPosition({ ...textPosition, y: parseInt(e.target.value) })} />\r\n                <button onClick={handleAddText}>Add Text</button>\r\n            </div>\r\n            <div>\r\n                <canvas\r\n                    ref={canvasRef}\r\n                    onMouseDown={startDrawing}\r\n                    onMouseUp={finishDrawing}\r\n                    onMouseMove={draw}\r\n                    style={{ border: '1px solid black', marginLeft: \"30px\", marginTop: \"10px\"}}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button onClick={handleSave}>Save Image</button>\r\n            </div>\r\n            <div>\r\n\r\n                <button onClick={clearAll}>Clear All</button>\r\n            </div>\r\n            <h4>List of Images (info)</h4>\r\n            <ImageList onSelectImage={handleSelectImage}></ImageList>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default DrawingForm;\r\n\r\n\r\nexport const ImageViewer: React.FC<{ imageId: number }> = ({ imageId }) => {\r\n    const [imageData, setImageData] = useState(null);\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchImageData = async () => {\r\n            try {\r\n                const imageDetails = await ApiService.getImageById(imageId);\r\n                console.log('Received image details:', imageDetails);\r\n\r\n                // Assuming the structure is { name: 'Test', id: 1, description: 'Test', imageData: 'base64-encoded-data' }\r\n                const imageData = imageDetails.imageData;\r\n\r\n                setImageData(imageData);\r\n            } catch (error) {\r\n                console.error('Error fetching image data:', error);\r\n            }\r\n        };\r\n\r\n        fetchImageData();\r\n    }, [imageId]);\r\n    const EditForm: React.FC<{ imageDetails: ImageCreation; onSubmit: (details: ImageCreation, file: File | null) => void;\r\n        onCancel: () => void }> = ({ imageDetails, onSubmit, onCancel }) => {\r\n        const [id, setId] = useState(imageDetails.id);\r\n        const [patientId, setPatinetId] = useState(imageDetails.patientId);\r\n        const [name, setName] = useState(imageDetails.name);\r\n        const [description, setDescription] = useState(imageDetails.description);\r\n        const [selectedFile, setSelectedFile] = useState<File | null>(null);\r\n\r\n        const handleSubmit = (e: React.FormEvent) => {\r\n            e.preventDefault();\r\n            // Perform validation if needed\r\n\r\n            // Call onSubmit with updated details\r\n            onSubmit({id ,name, description, imageData: imageDetails.imageData, patientId}, selectedFile);\r\n        };\r\n\r\n        const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            const file = e.target.files && e.target.files[0];\r\n            setSelectedFile(file);\r\n        };\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <label>Name:</label>\r\n                <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)}/>\r\n\r\n                <label>Description:</label>\r\n                <textarea value={description} onChange={(e) => setDescription(e.target.value)}/>\r\n\r\n                <label>Image:</label>\r\n                <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n\r\n                <button type=\"submit\">Save</button>\r\n                <button type=\"button\" onClick={onCancel}>Cancel</button>\r\n            </form>\r\n        );\r\n    };\r\n\r\n    const handleEditSubmit = async (updatedDetails: ImageCreation) => {\r\n        try {\r\n            // Make API call to update image details\r\n            await ApiService.updateImageById(imageId, updatedDetails);\r\n\r\n            // Refresh the image details after the update\r\n            const updatedImageDetails = await ApiService.getImageById(imageId);\r\n            setImageData(updatedImageDetails);\r\n\r\n            // Exit the edit mode\r\n            setEditMode(false);\r\n        } catch (error) {\r\n            console.error('Error updating image details:', error);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {editMode && imageData !== null ? (\r\n                // Render the edit form\r\n                <EditForm\r\n                    imageDetails={imageData}\r\n                    onSubmit={(updatedDetails) => handleEditSubmit(updatedDetails)}\r\n                    onCancel={() => setEditMode(false)}\r\n                />\r\n            ) : (\r\n                // Render the image\r\n                <div>\r\n\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport const ImageList: React.FC<{ onSelectImage: (imageId: number) => void }> = ({ onSelectImage }) => {\r\n    const [images, setImages] = useState([]);\r\n    const [selectedImageId, setSelectedImageId] = useState<number | null>(null);\r\n    useEffect(() => {\r\n        const patientId = sessionStorage.getItem(\"patientId\");\r\n        const fetchImages = async () => {\r\n            try {\r\n                const imageData = await ApiService.getAllImages(patientId !== null ? +patientId : 0);\r\n                setImages(imageData);\r\n            } catch (error) {\r\n                console.error('Error fetching image data:', error);\r\n            }\r\n        };\r\n\r\n        fetchImages();\r\n    }, []);\r\n\r\n   \r\n\r\n    const handleSelectImage = (imageId: number) => {\r\n        onSelectImage(imageId)\r\n        setSelectedImageId(imageId);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {images.map((image: any) => (\r\n                    <li key={image.id}>\r\n                        <div>ID: {image.id}</div>\r\n                        <div>Name: {image.name}</div>\r\n                        <div>Description: {image.description}</div>\r\n                        <button onClick={() => handleSelectImage(image.id)}>Select Image</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedImageId && <ImageViewer imageId={selectedImageId} />}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\services\\ApiServices.tsx",["168"],[],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\PatientSearchForm.tsx",[],[],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\HttpClient.js",[],[],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\keycloak.js",[],[],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\Login.js",[],[],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\TestLogin.js",[],[],"C:\\Users\\Mohamad H\\Desktop\\KTH\\TIDAA3\\Fullstack\\labbar\\Front\\FrontEnd\\j-client\\src\\components\\styles.js",[],[],{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":1,"column":16,"nodeType":"183","messageId":"184","endLine":1,"endColumn":26},{"ruleId":"181","severity":1,"message":"185","line":1,"column":28,"nodeType":"183","messageId":"184","endLine":1,"endColumn":36},{"ruleId":"181","severity":1,"message":"186","line":2,"column":8,"nodeType":"183","messageId":"184","endLine":2,"endColumn":17},{"ruleId":"181","severity":1,"message":"187","line":6,"column":30,"nodeType":"183","messageId":"184","endLine":6,"endColumn":38},{"ruleId":"181","severity":1,"message":"188","line":6,"column":47,"nodeType":"183","messageId":"184","endLine":6,"endColumn":53},{"ruleId":"181","severity":1,"message":"189","line":6,"column":63,"nodeType":"183","messageId":"184","endLine":6,"endColumn":74},{"ruleId":"190","severity":1,"message":"191","line":76,"column":12,"nodeType":"183","messageId":"184","endLine":76,"endColumn":20},{"ruleId":"190","severity":1,"message":"192","line":76,"column":22,"nodeType":"183","messageId":"184","endLine":76,"endColumn":33},{"ruleId":"190","severity":1,"message":"193","line":79,"column":12,"nodeType":"183","messageId":"184","endLine":79,"endColumn":27},{"ruleId":"194","severity":1,"message":"195","line":116,"column":8,"nodeType":"196","endLine":116,"endColumn":10,"suggestions":"197"},{"ruleId":"190","severity":1,"message":"198","line":1,"column":37,"nodeType":"183","messageId":"184","endLine":1,"endColumn":46},{"ruleId":"190","severity":1,"message":"199","line":1,"column":48,"nodeType":"183","messageId":"184","endLine":1,"endColumn":59},{"ruleId":"190","severity":1,"message":"200","line":8,"column":10,"nodeType":"183","messageId":"184","endLine":8,"endColumn":16},{"ruleId":"190","severity":1,"message":"201","line":25,"column":12,"nodeType":"183","messageId":"184","endLine":25,"endColumn":23},{"ruleId":"190","severity":1,"message":"202","line":25,"column":25,"nodeType":"183","messageId":"184","endLine":25,"endColumn":39},{"ruleId":"190","severity":1,"message":"203","line":30,"column":12,"nodeType":"183","messageId":"184","endLine":30,"endColumn":28},{"ruleId":"190","severity":1,"message":"204","line":30,"column":30,"nodeType":"183","messageId":"184","endLine":30,"endColumn":49},{"ruleId":"190","severity":1,"message":"205","line":31,"column":12,"nodeType":"183","messageId":"184","endLine":31,"endColumn":30},{"ruleId":"190","severity":1,"message":"206","line":31,"column":32,"nodeType":"183","messageId":"184","endLine":31,"endColumn":53},{"ruleId":"194","severity":1,"message":"207","line":51,"column":8,"nodeType":"196","endLine":51,"endColumn":24,"suggestions":"208"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"190","severity":1,"message":"209","line":2,"column":23,"nodeType":"183","messageId":"184","endLine":2,"endColumn":32},{"ruleId":"190","severity":1,"message":"210","line":4,"column":9,"nodeType":"183","messageId":"184","endLine":4,"endColumn":16},{"ruleId":"190","severity":1,"message":"211","line":4,"column":47,"nodeType":"183","messageId":"184","endLine":4,"endColumn":51},{"ruleId":"190","severity":1,"message":"212","line":12,"column":12,"nodeType":"183","messageId":"184","endLine":12,"endColumn":18},{"ruleId":"190","severity":1,"message":"213","line":1,"column":51,"nodeType":"183","messageId":"184","endLine":1,"endColumn":60},{"ruleId":"190","severity":1,"message":"182","line":2,"column":16,"nodeType":"183","messageId":"184","endLine":2,"endColumn":26},{"ruleId":"190","severity":1,"message":"214","line":3,"column":9,"nodeType":"183","messageId":"184","endLine":3,"endColumn":20},{"ruleId":"190","severity":1,"message":"215","line":4,"column":27,"nodeType":"183","messageId":"184","endLine":4,"endColumn":32},{"ruleId":"190","severity":1,"message":"216","line":5,"column":8,"nodeType":"183","messageId":"184","endLine":5,"endColumn":18},{"ruleId":"190","severity":1,"message":"217","line":15,"column":12,"nodeType":"183","messageId":"184","endLine":15,"endColumn":32},{"ruleId":"190","severity":1,"message":"218","line":15,"column":34,"nodeType":"183","messageId":"184","endLine":15,"endColumn":57},{"ruleId":"190","severity":1,"message":"219","line":16,"column":12,"nodeType":"183","messageId":"184","endLine":16,"endColumn":30},{"ruleId":"190","severity":1,"message":"220","line":16,"column":32,"nodeType":"183","messageId":"184","endLine":16,"endColumn":53},{"ruleId":"190","severity":1,"message":"221","line":18,"column":12,"nodeType":"183","messageId":"184","endLine":18,"endColumn":23},{"ruleId":"190","severity":1,"message":"222","line":18,"column":25,"nodeType":"183","messageId":"184","endLine":18,"endColumn":39},{"ruleId":"190","severity":1,"message":"223","line":29,"column":11,"nodeType":"183","messageId":"184","endLine":29,"endColumn":19},{"ruleId":"194","severity":1,"message":"224","line":48,"column":8,"nodeType":"196","endLine":48,"endColumn":24,"suggestions":"225"},{"ruleId":"190","severity":1,"message":"226","line":108,"column":11,"nodeType":"183","messageId":"184","endLine":108,"endColumn":24},{"ruleId":"190","severity":1,"message":"227","line":4,"column":24,"nodeType":"183","messageId":"184","endLine":4,"endColumn":36},{"ruleId":"190","severity":1,"message":"228","line":18,"column":12,"nodeType":"183","messageId":"184","endLine":18,"endColumn":21},{"ruleId":"190","severity":1,"message":"229","line":19,"column":12,"nodeType":"183","messageId":"184","endLine":19,"endColumn":27},{"ruleId":"190","severity":1,"message":"230","line":75,"column":11,"nodeType":"183","messageId":"184","endLine":75,"endColumn":23},{"ruleId":"190","severity":1,"message":"231","line":222,"column":20,"nodeType":"183","messageId":"184","endLine":222,"endColumn":25},{"ruleId":"190","severity":1,"message":"232","line":223,"column":27,"nodeType":"183","messageId":"184","endLine":223,"endColumn":39},{"ruleId":"190","severity":1,"message":"210","line":8,"column":5,"nodeType":"183","messageId":"184","endLine":8,"endColumn":12},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["233"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'LoginPage' is defined but never used.","'Navigate' is defined but never used.","'Router' is defined but never used.","'useNavigate' is defined but never used.","@typescript-eslint/no-unused-vars","'messages' is assigned a value but never used.","'setMessages' is assigned a value but never used.","'selectedPatient' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.","ArrayExpression",["234"],"'FormEvent' is defined but never used.","'ChangeEvent' is defined but never used.","'number' is defined but never used.","'patientInfo' is assigned a value but never used.","'setPatientInfo' is assigned a value but never used.","'selectedDoctorId' is assigned a value but never used.","'setSelectedDoctorId' is assigned a value but never used.","'selectedDoctorName' is assigned a value but never used.","'setSelectedDoctorName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["235"],"'LoginUser' is defined but never used.","'Patient' is defined but never used.","'User' is defined but never used.","'userId' is assigned a value but never used.","'useEffect' is defined but never used.","'UserContext' is defined but never used.","'Route' is defined but never used.","'ApiService' is defined but never used.","'previousObservations' is assigned a value but never used.","'setPreviousObservations' is assigned a value but never used.","'listOfEncounterIds' is assigned a value but never used.","'setListOfEncounterIds' is assigned a value but never used.","'encounterId' is assigned a value but never used.","'setEncounterId' is assigned a value but never used.","'navigate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'patientId'. Either include it or remove the dependency array.",["236"],"'handleAddNote' is assigned a value but never used.","'ImageDetails' is defined but never used.","'redoStack' is assigned a value but never used.","'selectedImageId' is assigned a value but never used.","'redrawCanvas' is assigned a value but never used.","'setId' is assigned a value but never used.","'setPatinetId' is assigned a value but never used.","no-object-constructor",{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},"Update the dependencies array to be: [fetchMessages]",{"range":"243","text":"244"},"Update the dependencies array to be: [patientDetails, userId]",{"range":"245","text":"246"},"Update the dependencies array to be: [patientDetails, patientId]",{"range":"247","text":"248"},[4677,4679],"[fetchMessages]",[2739,2755],"[patientDetails, userId]",[2329,2345],"[patientDetails, patientId]"]