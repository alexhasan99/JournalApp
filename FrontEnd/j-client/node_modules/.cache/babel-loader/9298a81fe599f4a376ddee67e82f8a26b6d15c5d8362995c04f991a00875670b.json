{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamad H\\\\Desktop\\\\KTH\\\\TIDAA3\\\\Fullstack\\\\labbar\\\\Front\\\\FrontEnd\\\\j-client\\\\src\\\\components\\\\Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport ApiService from '../services/ApiServices';\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from \"./UserSession\";\nimport ApiServices from \"../services/ApiServices\";\nimport Keycloak from 'keycloak-js';\nimport { httpClient } from './HttpClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [userType, setUserType] = useState('');\n  const [userId, setUserId] = useState();\n  const [patientDetails, setPatientDetails] = useState();\n  const [staffDetails, setStaffDetails] = useState();\n  const navigate = useNavigate();\n  const {\n    setUser\n  } = useContext(UserContext);\n  let initOptions = {\n    realm: \"Journal\",\n    url: \"http://localhost:8090/\",\n    clientId: \"frontend\"\n  };\n  let kc = new Keycloak(initOptions);\n  kc.init({\n    onLoad: 'login-required',\n    // Supported values: 'check-sso' , 'login-required'\n    checkLoginIframe: true,\n    pkceMethod: 'S256'\n  }).then(auth => {\n    if (!auth) {\n      window.location.reload();\n    } else {\n      /* Remove below logs if you are using this on production */\n      console.info(\"Authenticated\");\n      console.log('auth', auth);\n      console.log('Keycloak', kc);\n      console.log('Access Token', kc.token);\n\n      /* http client will use this header in every request it sends */\n      httpClient.defaults.headers.common['Authorization'] = `Bearer ${kc.token}`;\n      kc.onTokenExpired = () => {\n        console.log('token expired');\n      };\n    }\n  }, () => {\n    /* Notify the user if necessary */\n    console.error(\"Authentication Failed\");\n  });\n  useEffect(() => {\n    if (patientDetails) {\n      // Redirect after getting patient details\n      const parsedUserId = Number(patientDetails.id); // Convert to a number\n      if (!isNaN(parsedUserId)) {\n        setUserId(parsedUserId); // Update userId state\n        console.log(\"PatientDetails: \" + parsedUserId);\n        navigate(`/patient/${parsedUserId}`);\n      } else {\n        console.error(\"Invalid userId received from patientDetails:\", patientDetails.id);\n        // Handle the scenario where userId is not a valid number\n      }\n    }\n  }, [navigate, patientDetails]);\n  useEffect(() => {\n    keycloak.init({\n      onLoad: 'login-required'\n    }).then(authenticated => {\n      if (authenticated) {\n        console.log(\"Authenticated\", keycloak.token);\n        // Använd keycloak.token för att göra säkra API-anrop\n        // Navigera till användarens startsida baserat på roll eller annan logik\n        navigate('/'); // Ändra '/' till din önskade ruta efter inloggning\n      } else {\n        console.warn(\"Not authenticated\");\n        // Hantera ej autentiserad/logga ut\n      }\n    });\n  }, [navigate, keycloak]);\n  useEffect(() => {\n    if (staffDetails) {\n      // Redirect after getting patient details\n      const parsedUserId = Number(staffDetails.id); // Convert to a number\n      if (!isNaN(parsedUserId)) {\n        setUserId(parsedUserId); // Update userId state\n        console.log(\"PatientDetails: \" + parsedUserId);\n        navigate(`/staff/${parsedUserId}`);\n      } else {\n        console.error(\"Invalid userId received from patientDetails:\", staffDetails.id);\n        // Handle the scenario where userId is not a valid number\n      }\n    }\n  }, [navigate, staffDetails]);\n  const handleLogin = async e => {\n    e.preventDefault();\n    try {\n      const user = {\n        email,\n        password,\n        userType\n      };\n      const loginSuccess = await ApiService.loginUser(user);\n      console.log('Login Sucess: ', user);\n      if (loginSuccess) {\n        let data;\n        if (userType === 'PATIENT') {\n          data = await ApiService.getPatientByEmail(email);\n          setPatientDetails(data);\n        } else if (userType === 'STAFF') {\n          data = await ApiServices.getStaffByEmail(email);\n          setStaffDetails(data);\n          console.log(data);\n        }\n        if (data && data.id) {\n          setUserId(data.id);\n          setUser({\n            userId: data.id,\n            email,\n            userType\n          });\n          sessionStorage.setItem('currentUserLoggedIn', JSON.stringify({\n            id: data.id,\n            email,\n            userType,\n            userId: data.user.id\n          }));\n          alert('Login successful!\\nYou wrote: ' + email + ', ' + userType);\n        } else {\n          // Handle unexpected data format or missing data\n          alert('Failed to fetch user data');\n        }\n      } else {\n        // Handle incorrect credentials\n        alert('Invalid username or password');\n      }\n    } catch (error) {\n      // Handle API fetch error\n      console.error('Error:', error);\n      alert('Error occurred during login');\n    }\n  };\n  const handleRegister = () => {\n    navigate(\"/registerForm\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Role:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: userType,\n          onChange: e => setUserType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select role\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"PATIENT\",\n            children: \"Patient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"STAFF\",\n            children: \"Staff\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRegister,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n};\n_s(LoginForm, \"FmnQ9phrJU0LW0hkxN6itxj6xbU=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useContext","useEffect","useState","ApiService","useNavigate","UserContext","ApiServices","Keycloak","httpClient","jsxDEV","_jsxDEV","LoginForm","_s","email","setEmail","password","setPassword","userType","setUserType","userId","setUserId","patientDetails","setPatientDetails","staffDetails","setStaffDetails","navigate","setUser","initOptions","realm","url","clientId","kc","init","onLoad","checkLoginIframe","pkceMethod","then","auth","window","location","reload","console","info","log","token","defaults","headers","common","onTokenExpired","error","parsedUserId","Number","id","isNaN","keycloak","authenticated","warn","handleLogin","e","preventDefault","user","loginSuccess","loginUser","data","getPatientByEmail","getStaffByEmail","sessionStorage","setItem","JSON","stringify","alert","handleRegister","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Mohamad H/Desktop/KTH/TIDAA3/Fullstack/labbar/Front/FrontEnd/j-client/src/components/Home.tsx"],"sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport ApiService from '../services/ApiServices';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {Patient, PatientForPage, StaffMember, User} from \"../interface/interface\";\r\nimport {UserContext} from \"./UserSession\";\r\nimport ApiServices from \"../services/ApiServices\";\r\nimport Keycloak from 'keycloak-js';\r\nimport { httpClient } from './HttpClient';\r\n\r\nconst LoginForm = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [userType, setUserType] = useState('');\r\n    const [userId, setUserId] = useState<number| undefined>();\r\n    const [patientDetails, setPatientDetails] = useState<PatientForPage>();\r\n    const [staffDetails, setStaffDetails] = useState<StaffMember>();\r\n    const navigate = useNavigate();\r\n    const { setUser } = useContext(UserContext);\r\n\r\n    let initOptions = {\r\n        realm: \"Journal\",\r\n        url: \"http://localhost:8090/\",\r\n        clientId: \"frontend\",\r\n      }\r\n    \r\n      let kc = new Keycloak(initOptions);\r\n    \r\n    kc.init({\r\n      onLoad: 'login-required', // Supported values: 'check-sso' , 'login-required'\r\n      checkLoginIframe: true,\r\n      pkceMethod: 'S256'\r\n    }).then((auth) => {\r\n      if (!auth) {\r\n        window.location.reload();\r\n      } else {\r\n        /* Remove below logs if you are using this on production */\r\n        console.info(\"Authenticated\");\r\n        console.log('auth', auth)\r\n        console.log('Keycloak', kc)\r\n        console.log('Access Token', kc.token)\r\n    \r\n        /* http client will use this header in every request it sends */\r\n        httpClient.defaults.headers.common['Authorization'] = `Bearer ${kc.token}`;\r\n    \r\n        kc.onTokenExpired = () => {\r\n          console.log('token expired')\r\n        }\r\n      }\r\n    }, () => {\r\n      /* Notify the user if necessary */\r\n      console.error(\"Authentication Failed\");\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (patientDetails) {\r\n            // Redirect after getting patient details\r\n            const parsedUserId = Number(patientDetails.id); // Convert to a number\r\n            if (!isNaN(parsedUserId)) {\r\n                setUserId(parsedUserId); // Update userId state\r\n                console.log(\"PatientDetails: \" + parsedUserId);\r\n                navigate(`/patient/${parsedUserId}`);\r\n            } else {\r\n                console.error(\"Invalid userId received from patientDetails:\", patientDetails.id);\r\n                // Handle the scenario where userId is not a valid number\r\n            }\r\n        }\r\n    }, [navigate, patientDetails]);\r\n\r\n    useEffect(() => {\r\n        keycloak.init({ onLoad: 'login-required' }).then((authenticated) => {\r\n            if (authenticated) {\r\n                console.log(\"Authenticated\", keycloak.token);\r\n                // Använd keycloak.token för att göra säkra API-anrop\r\n                // Navigera till användarens startsida baserat på roll eller annan logik\r\n                navigate('/'); // Ändra '/' till din önskade ruta efter inloggning\r\n            } else {\r\n                console.warn(\"Not authenticated\");\r\n                // Hantera ej autentiserad/logga ut\r\n            }\r\n        });\r\n    }, [navigate, keycloak]);\r\n\r\n    useEffect(() => {\r\n        if (staffDetails) {\r\n            // Redirect after getting patient details\r\n            const parsedUserId = Number(staffDetails.id); // Convert to a number\r\n            if (!isNaN(parsedUserId)) {\r\n                setUserId(parsedUserId); // Update userId state\r\n                console.log(\"PatientDetails: \" + parsedUserId);\r\n                navigate(`/staff/${parsedUserId}`);\r\n            } else {\r\n                console.error(\"Invalid userId received from patientDetails:\", staffDetails.id);\r\n                // Handle the scenario where userId is not a valid number\r\n            }\r\n        }\r\n    }, [navigate, staffDetails]);\r\n\r\n\r\n    const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const user = { email, password, userType };\r\n            const loginSuccess = await ApiService.loginUser(user);\r\n            console.log('Login Sucess: ', user)\r\n\r\n            if (loginSuccess) {\r\n                let data;\r\n                if (userType === 'PATIENT') {\r\n                    data = await ApiService.getPatientByEmail(email);\r\n                    setPatientDetails(data);\r\n                } else if (userType === 'STAFF') {\r\n                    data = await ApiServices.getStaffByEmail(email);\r\n                    setStaffDetails(data);\r\n                    console.log(data)\r\n                }\r\n                if (data && data.id) {\r\n                    setUserId(data.id);\r\n                    setUser({ userId: data.id, email, userType });\r\n                    sessionStorage.setItem('currentUserLoggedIn', JSON.stringify({ id: data.id, email, userType, userId:data.user.id }));\r\n\r\n\r\n                    alert('Login successful!\\nYou wrote: ' + email + ', ' + userType);\r\n                } else {\r\n                    // Handle unexpected data format or missing data\r\n                    alert('Failed to fetch user data');\r\n                }\r\n            } else {\r\n                // Handle incorrect credentials\r\n                alert('Invalid username or password');\r\n            }\r\n        } catch (error) {\r\n            // Handle API fetch error\r\n            console.error('Error:', error);\r\n            alert('Error occurred during login');\r\n        }\r\n    };\r\n\r\n    const handleRegister = () => {\r\n        navigate(\"/registerForm\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <form onSubmit={handleLogin}>\r\n                <label>\r\n                    Email:\r\n                    <input\r\n                        type=\"text\"\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Password:\r\n                    <input\r\n                        type=\"password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Role:\r\n                    <select value={userType} onChange={(e) => setUserType(e.target.value)}>\r\n                        <option value=\"\">Select role</option>\r\n                        <option value=\"PATIENT\">Patient</option>\r\n                        <option value=\"STAFF\">Staff</option>\r\n                    </select>\r\n                </label>\r\n                <br />\r\n                <button type=\"submit\">Login</button>\r\n                <button onClick={handleRegister}>Register</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default LoginForm;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC5D,OAAOC,UAAU,MAAM,yBAAyB;AAChD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,SAAQC,WAAW,QAAO,eAAe;AACzC,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,QAAQ,MAAM,aAAa;AAClC,SAASC,UAAU,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAoB,CAAC;EACzD,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAiB,CAAC;EACtE,MAAM,CAACqB,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAc,CAAC;EAC/D,MAAMuB,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEsB;EAAQ,CAAC,GAAG1B,UAAU,CAACK,WAAW,CAAC;EAE3C,IAAIsB,WAAW,GAAG;IACdC,KAAK,EAAE,SAAS;IAChBC,GAAG,EAAE,wBAAwB;IAC7BC,QAAQ,EAAE;EACZ,CAAC;EAED,IAAIC,EAAE,GAAG,IAAIxB,QAAQ,CAACoB,WAAW,CAAC;EAEpCI,EAAE,CAACC,IAAI,CAAC;IACNC,MAAM,EAAE,gBAAgB;IAAE;IAC1BC,gBAAgB,EAAE,IAAI;IACtBC,UAAU,EAAE;EACd,CAAC,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;IAChB,IAAI,CAACA,IAAI,EAAE;MACTC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IAC1B,CAAC,MAAM;MACL;MACAC,OAAO,CAACC,IAAI,CAAC,eAAe,CAAC;MAC7BD,OAAO,CAACE,GAAG,CAAC,MAAM,EAAEN,IAAI,CAAC;MACzBI,OAAO,CAACE,GAAG,CAAC,UAAU,EAAEZ,EAAE,CAAC;MAC3BU,OAAO,CAACE,GAAG,CAAC,cAAc,EAAEZ,EAAE,CAACa,KAAK,CAAC;;MAErC;MACApC,UAAU,CAACqC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAI,UAAShB,EAAE,CAACa,KAAM,EAAC;MAE1Eb,EAAE,CAACiB,cAAc,GAAG,MAAM;QACxBP,OAAO,CAACE,GAAG,CAAC,eAAe,CAAC;MAC9B,CAAC;IACH;EACF,CAAC,EAAE,MAAM;IACP;IACAF,OAAO,CAACQ,KAAK,CAAC,uBAAuB,CAAC;EACxC,CAAC,CAAC;EAEFhD,SAAS,CAAC,MAAM;IACZ,IAAIoB,cAAc,EAAE;MAChB;MACA,MAAM6B,YAAY,GAAGC,MAAM,CAAC9B,cAAc,CAAC+B,EAAE,CAAC,CAAC,CAAC;MAChD,IAAI,CAACC,KAAK,CAACH,YAAY,CAAC,EAAE;QACtB9B,SAAS,CAAC8B,YAAY,CAAC,CAAC,CAAC;QACzBT,OAAO,CAACE,GAAG,CAAC,kBAAkB,GAAGO,YAAY,CAAC;QAC9CzB,QAAQ,CAAE,YAAWyB,YAAa,EAAC,CAAC;MACxC,CAAC,MAAM;QACHT,OAAO,CAACQ,KAAK,CAAC,8CAA8C,EAAE5B,cAAc,CAAC+B,EAAE,CAAC;QAChF;MACJ;IACJ;EACJ,CAAC,EAAE,CAAC3B,QAAQ,EAAEJ,cAAc,CAAC,CAAC;EAE9BpB,SAAS,CAAC,MAAM;IACZqD,QAAQ,CAACtB,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAiB,CAAC,CAAC,CAACG,IAAI,CAAEmB,aAAa,IAAK;MAChE,IAAIA,aAAa,EAAE;QACfd,OAAO,CAACE,GAAG,CAAC,eAAe,EAAEW,QAAQ,CAACV,KAAK,CAAC;QAC5C;QACA;QACAnB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;MACnB,CAAC,MAAM;QACHgB,OAAO,CAACe,IAAI,CAAC,mBAAmB,CAAC;QACjC;MACJ;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,CAAC/B,QAAQ,EAAE6B,QAAQ,CAAC,CAAC;EAExBrD,SAAS,CAAC,MAAM;IACZ,IAAIsB,YAAY,EAAE;MACd;MACA,MAAM2B,YAAY,GAAGC,MAAM,CAAC5B,YAAY,CAAC6B,EAAE,CAAC,CAAC,CAAC;MAC9C,IAAI,CAACC,KAAK,CAACH,YAAY,CAAC,EAAE;QACtB9B,SAAS,CAAC8B,YAAY,CAAC,CAAC,CAAC;QACzBT,OAAO,CAACE,GAAG,CAAC,kBAAkB,GAAGO,YAAY,CAAC;QAC9CzB,QAAQ,CAAE,UAASyB,YAAa,EAAC,CAAC;MACtC,CAAC,MAAM;QACHT,OAAO,CAACQ,KAAK,CAAC,8CAA8C,EAAE1B,YAAY,CAAC6B,EAAE,CAAC;QAC9E;MACJ;IACJ;EACJ,CAAC,EAAE,CAAC3B,QAAQ,EAAEF,YAAY,CAAC,CAAC;EAG5B,MAAMkC,WAAW,GAAG,MAAOC,CAAmC,IAAK;IAC/DA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACA,MAAMC,IAAI,GAAG;QAAE/C,KAAK;QAAEE,QAAQ;QAAEE;MAAS,CAAC;MAC1C,MAAM4C,YAAY,GAAG,MAAM1D,UAAU,CAAC2D,SAAS,CAACF,IAAI,CAAC;MACrDnB,OAAO,CAACE,GAAG,CAAC,gBAAgB,EAAEiB,IAAI,CAAC;MAEnC,IAAIC,YAAY,EAAE;QACd,IAAIE,IAAI;QACR,IAAI9C,QAAQ,KAAK,SAAS,EAAE;UACxB8C,IAAI,GAAG,MAAM5D,UAAU,CAAC6D,iBAAiB,CAACnD,KAAK,CAAC;UAChDS,iBAAiB,CAACyC,IAAI,CAAC;QAC3B,CAAC,MAAM,IAAI9C,QAAQ,KAAK,OAAO,EAAE;UAC7B8C,IAAI,GAAG,MAAMzD,WAAW,CAAC2D,eAAe,CAACpD,KAAK,CAAC;UAC/CW,eAAe,CAACuC,IAAI,CAAC;UACrBtB,OAAO,CAACE,GAAG,CAACoB,IAAI,CAAC;QACrB;QACA,IAAIA,IAAI,IAAIA,IAAI,CAACX,EAAE,EAAE;UACjBhC,SAAS,CAAC2C,IAAI,CAACX,EAAE,CAAC;UAClB1B,OAAO,CAAC;YAAEP,MAAM,EAAE4C,IAAI,CAACX,EAAE;YAAEvC,KAAK;YAAEI;UAAS,CAAC,CAAC;UAC7CiD,cAAc,CAACC,OAAO,CAAC,qBAAqB,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEjB,EAAE,EAAEW,IAAI,CAACX,EAAE;YAAEvC,KAAK;YAAEI,QAAQ;YAAEE,MAAM,EAAC4C,IAAI,CAACH,IAAI,CAACR;UAAG,CAAC,CAAC,CAAC;UAGpHkB,KAAK,CAAC,gCAAgC,GAAGzD,KAAK,GAAG,IAAI,GAAGI,QAAQ,CAAC;QACrE,CAAC,MAAM;UACH;UACAqD,KAAK,CAAC,2BAA2B,CAAC;QACtC;MACJ,CAAC,MAAM;QACH;QACAA,KAAK,CAAC,8BAA8B,CAAC;MACzC;IACJ,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACZ;MACAR,OAAO,CAACQ,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BqB,KAAK,CAAC,6BAA6B,CAAC;IACxC;EACJ,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB9C,QAAQ,CAAC,eAAe,CAAC;EAC7B,CAAC;EAED,oBACIf,OAAA;IAAA8D,QAAA,gBACI9D,OAAA;MAAA8D,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdlE,OAAA;MAAMmE,QAAQ,EAAEpB,WAAY;MAAAe,QAAA,gBACxB9D,OAAA;QAAA8D,QAAA,GAAO,QAEH,eAAA9D,OAAA;UACIoE,IAAI,EAAC,MAAM;UACXC,KAAK,EAAElE,KAAM;UACbmE,QAAQ,EAAGtB,CAAC,IAAK5C,QAAQ,CAAC4C,CAAC,CAACuB,MAAM,CAACF,KAAK;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACRlE,OAAA;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNlE,OAAA;QAAA8D,QAAA,GAAO,WAEH,eAAA9D,OAAA;UACIoE,IAAI,EAAC,UAAU;UACfC,KAAK,EAAEhE,QAAS;UAChBiE,QAAQ,EAAGtB,CAAC,IAAK1C,WAAW,CAAC0C,CAAC,CAACuB,MAAM,CAACF,KAAK;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACRlE,OAAA;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNlE,OAAA;QAAA8D,QAAA,GAAO,OAEH,eAAA9D,OAAA;UAAQqE,KAAK,EAAE9D,QAAS;UAAC+D,QAAQ,EAAGtB,CAAC,IAAKxC,WAAW,CAACwC,CAAC,CAACuB,MAAM,CAACF,KAAK,CAAE;UAAAP,QAAA,gBAClE9D,OAAA;YAAQqE,KAAK,EAAC,EAAE;YAAAP,QAAA,EAAC;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACrClE,OAAA;YAAQqE,KAAK,EAAC,SAAS;YAAAP,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACxClE,OAAA;YAAQqE,KAAK,EAAC,OAAO;YAAAP,QAAA,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACRlE,OAAA;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNlE,OAAA;QAAQoE,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpClE,OAAA;QAAQwE,OAAO,EAAEX,cAAe;QAAAC,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;AAAChE,EAAA,CAzKID,SAAS;EAAA,QAOMP,WAAW;AAAA;AAAA+E,EAAA,GAP1BxE,SAAS;AA4Kf,eAAeA,SAAS;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}