{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamad H\\\\Desktop\\\\KTH\\\\TIDAA3\\\\Fullstack\\\\labbar\\\\Front\\\\FrontEnd\\\\j-client\\\\src\\\\components\\\\SelectedPatientPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ApiServices from \"../services/ApiServices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectedPatientPage = () => {\n  _s();\n  const {\n    patientId\n  } = useParams();\n  const [patientDetails, setPatientDetails] = useState(); // Update 'any' with the actual patient details interface/type\n  const [previousEncounters, setPreviousEncounters] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [messagesReply, setMessagesReply] = useState([]);\n  const [previousObservations, setPreviousObservations] = useState();\n  const [listOfEncounterIds, setListOfEncounterIds] = useState([]);\n  const [note, setNote] = useState('');\n  const [encounterId, setEncounterId] = useState('');\n  const [userId, setUserId] = useState('');\n  const [conditions, setConditions] = useState([]);\n  const [expandedEncounterId, setExpandedEncounterId] = useState(null);\n  const toggleExpand = encounterId => {\n    if (expandedEncounterId === encounterId) {\n      setExpandedEncounterId(null); // Collapse if already expanded\n    } else {\n      setExpandedEncounterId(encounterId); // Expand clicked encounter\n    }\n  };\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (patientId) {\n      ApiServices.getPatientById(parseInt(patientId)).then(data => {\n        var _data$user$id;\n        setPatientDetails(data);\n        const userId = (_data$user$id = data === null || data === void 0 ? void 0 : data.user.id) !== null && _data$user$id !== void 0 ? _data$user$id : 0; // Use nullish coalescing operator to handle undefined\n        setUserId(String(userId));\n        // Update userId here once patientDetails are fetched\n        sessionStorage.setItem(\"patientId\", patientId);\n      });\n    }\n  }, [patientId]);\n  useEffect(() => {\n    if (patientId) {\n      ApiServices.getAllEncountersByUserId(parseInt(patientId)).then(data => setPreviousEncounters(data));\n    }\n  }, [patientDetails]);\n  useEffect(() => {\n    // Fetch messages using the getConversationBySenderAndReceiver method\n    const fetchMessages = async () => {\n      try {\n        let doctorId = 0;\n        const userIdFromSession = sessionStorage.getItem(\"currentUserLoggedIn\");\n        if (userIdFromSession) {\n          const {\n            userId\n          } = JSON.parse(userIdFromSession);\n          doctorId = userId;\n        }\n\n        // Fetch messages based on sender and receiver userIds\n        const conversationMessagesFromSender = await ApiServices.getConversationBySenderAndReceiver(parseInt(userId || '0'),\n        // Patient's userId\n        doctorId // Current user's userId\n        );\n\n        setMessages(conversationMessagesFromSender || []); // Set fetched messages in state\n\n        const conversationMessagesReply = await ApiServices.getConversationBySenderAndReceiver(doctorId, parseInt(userId || '0'));\n        setMessagesReply(conversationMessagesReply || []);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    if (userId) {\n      fetchMessages();\n    }\n  }, [userId]);\n  const handleAddCondition = () => {\n    if (conditions && conditions.length >= 0) {\n      const updatedConditions = [...conditions, '']; // Add an empty string for a new condition\n      setConditions(updatedConditions);\n    }\n  };\n  const handleConditionChange = (index, value) => {\n    const updatedConditions = [...conditions];\n    updatedConditions[index] = value;\n    setConditions(updatedConditions);\n  };\n  const formattedDate = timestamp => {\n    const date = new Date(timestamp);\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    return date.toLocaleDateString(undefined, options);\n  };\n  const formattedTime = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString();\n  };\n  const handleAddNote = async () => {\n    try {\n      // Create the encounter first\n      const encounterData = {\n        userId: parseInt(userId || ''),\n        timeStamp: new Date().toISOString()\n      };\n      const encounterCreation = await ApiServices.createEncounter(encounterData);\n      if (encounterCreation) {\n        // If encounter creation was successful, add the observation\n        const observationData = {\n          observationText: note,\n          observationDate: new Date().toISOString(),\n          type: 'conditions'\n        };\n        console.log(\"Encounter is: \" + encounterCreation);\n\n        // Create the observation associated with the encounter\n        const observationCreation = await ApiServices.addObservationToEncounter(encounterCreation, observationData);\n        if (observationCreation) {\n          // Observation created successfully and associated with the encounter\n          console.log('Observation created:', observationCreation);\n          // Perform any necessary action after successful creation\n        } else {\n          console.error('Failed to create observation');\n          // Handle failed observation creation\n        }\n      } else {\n        console.error('Failed to create encounter');\n        // Handle failed encounter creation\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle any other errors here\n    }\n  };\n\n  const styles = {\n    container: {\n      padding: '20px',\n      maxWidth: '800px',\n      margin: '20px auto',\n      fontFamily: 'Arial, sans-serif'\n    },\n    section: {\n      marginBottom: '20px'\n    },\n    encounterSection: {\n      cursor: 'pointer',\n      marginTop: '10px',\n      padding: '10px',\n      background: '#f0f0f0',\n      borderRadius: '5px'\n    },\n    messagesSection: {\n      background: '#e9ecef',\n      padding: '10px',\n      borderRadius: '5px'\n    },\n    messageItem: {\n      padding: '5px 10px',\n      borderRadius: '5px',\n      background: '#f8f9fa',\n      margin: '5px 0'\n    },\n    textarea: {\n      width: '100%',\n      padding: '10px',\n      margin: '10px 0',\n      borderRadius: '5px',\n      border: '1px solid #ccc',\n      boxSizing: 'border-box'\n    },\n    button: {\n      background: '#007bff',\n      color: 'white',\n      padding: '10px 15px',\n      border: 'none',\n      borderRadius: '5px',\n      cursor: 'pointer',\n      margin: '5px 0'\n    },\n    input: {\n      padding: '10px',\n      margin: '10px 0',\n      borderRadius: '5px',\n      border: '1px solid #ccc',\n      width: 'calc(100% - 22px)'\n    },\n    heading: {\n      color: '#007bff'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [patientDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.section,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: styles.heading,\n        children: \"Patient Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", patientDetails.firstname]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", patientDetails.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      style: styles.textarea,\n      placeholder: \"Add note/message\",\n      value: note,\n      onChange: e => setNote(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: styles.button,\n      onClick: handleAddCondition,\n      children: \"Add Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this), conditions.map((condition, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        style: styles.input,\n        type: \"text\",\n        value: condition,\n        onChange: e => handleConditionChange(index, e.target.value),\n        placeholder: `Condition ${index + 1}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.section,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.heading,\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.messagesSection,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            ...styles.heading,\n            fontSize: '18px'\n          },\n          children: \"From Patients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            listStyleType: 'none',\n            padding: 0\n          },\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            style: styles.messageItem,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Content: \", message.messageText]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                listStyleType: 'none',\n                padding: '0'\n              },\n              children: messagesReply.filter(reply => reply.sender === message.receiver && reply.receiver === message.sender).map((messagereply, replyIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                style: {\n                  ...styles.messageItem,\n                  background: '#d1ecf1'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"My Replies: \", messagereply.messageText]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 49\n                }, this)\n              }, replyIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.section,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.heading,\n        children: \"Previous Encounters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), previousEncounters.map((encounter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.encounterSection,\n        onClick: () => toggleExpand(encounter.id),\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Encounter \\u2B07 \", formattedDate(encounter.encounterDate)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 25\n        }, this), expandedEncounterId === encounter.id && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Time: \", formattedTime(encounter.encounterDate)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"EncounterId: \", encounter.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Encounter Location: \", encounter.location]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Observations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                listStyleType: 'none',\n                padding: 0\n              },\n              children: encounter.observations.map((observation, obsIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                style: styles.messageItem,\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Type: \", observation.type]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Message: \", observation.observationText]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Observation Date: \", formattedDate(observation.observationDate)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 49\n                }, this)]\n              }, obsIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectedPatientPage, \"kkwDKFxmgLerViH+ysBHrK3dHhQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = SelectedPatientPage;\nexport default SelectedPatientPage;\nvar _c;\n$RefreshReg$(_c, \"SelectedPatientPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","ApiServices","jsxDEV","_jsxDEV","SelectedPatientPage","_s","patientId","patientDetails","setPatientDetails","previousEncounters","setPreviousEncounters","messages","setMessages","messagesReply","setMessagesReply","previousObservations","setPreviousObservations","listOfEncounterIds","setListOfEncounterIds","note","setNote","encounterId","setEncounterId","userId","setUserId","conditions","setConditions","expandedEncounterId","setExpandedEncounterId","toggleExpand","navigate","getPatientById","parseInt","then","data","_data$user$id","user","id","String","sessionStorage","setItem","getAllEncountersByUserId","fetchMessages","doctorId","userIdFromSession","getItem","JSON","parse","conversationMessagesFromSender","getConversationBySenderAndReceiver","conversationMessagesReply","error","console","handleAddCondition","length","updatedConditions","handleConditionChange","index","value","formattedDate","timestamp","date","Date","options","year","month","day","toLocaleDateString","undefined","formattedTime","toLocaleTimeString","handleAddNote","encounterData","timeStamp","toISOString","encounterCreation","createEncounter","observationData","observationText","observationDate","type","log","observationCreation","addObservationToEncounter","styles","container","padding","maxWidth","margin","fontFamily","section","marginBottom","encounterSection","cursor","marginTop","background","borderRadius","messagesSection","messageItem","textarea","width","border","boxSizing","button","color","input","heading","style","children","fileName","_jsxFileName","lineNumber","columnNumber","firstname","email","placeholder","onChange","e","target","onClick","map","condition","fontSize","listStyleType","message","messageText","filter","reply","sender","receiver","messagereply","replyIndex","encounter","encounterDate","location","observations","observation","obsIndex","_c","$RefreshReg$"],"sources":["C:/Users/Mohamad H/Desktop/KTH/TIDAA3/Fullstack/labbar/Front/FrontEnd/j-client/src/components/SelectedPatientPage.tsx"],"sourcesContent":["import React, {useEffect, useState, CSSProperties } from 'react';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {EncounterForDisplay, Msg, Observation, Patient} from \"../interface/interface\";\r\nimport ApiServices from \"../services/ApiServices\";\r\nimport ApiService from \"../services/ApiServices\";\r\nimport DrawingForm from \"./DrawingForm\";\r\n\r\n\r\nconst SelectedPatientPage = () => {\r\n    const {patientId} = useParams<{ patientId?: string }>();\r\n    const [patientDetails, setPatientDetails] = useState<Patient>(); // Update 'any' with the actual patient details interface/type\r\n    const [previousEncounters, setPreviousEncounters] = useState<EncounterForDisplay[]>([]);\r\n    const [messages, setMessages] = useState<Msg[]>([]);\r\n    const [messagesReply, setMessagesReply] = useState<Msg[]>([]);\r\n    const [previousObservations, setPreviousObservations] = useState<Observation>();\r\n    const [listOfEncounterIds, setListOfEncounterIds] = useState<number[]>([]);\r\n    const [note, setNote] = useState('');\r\n    const [encounterId, setEncounterId] = useState('');\r\n    const [userId, setUserId] = useState('');\r\n    const [conditions, setConditions] = useState<string[]>([]);\r\n    const [expandedEncounterId, setExpandedEncounterId] = useState<number | null>(null);\r\n    const toggleExpand = (encounterId: number) => {\r\n        if (expandedEncounterId === encounterId) {\r\n            setExpandedEncounterId(null); // Collapse if already expanded\r\n        } else {\r\n            setExpandedEncounterId(encounterId); // Expand clicked encounter\r\n        }\r\n    };\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (patientId) {\r\n            ApiServices.getPatientById(parseInt(patientId)).then((data) => {\r\n                setPatientDetails(data);\r\n                const userId = data?.user.id ?? 0; // Use nullish coalescing operator to handle undefined\r\n                setUserId(String(userId)); \r\n                // Update userId here once patientDetails are fetched\r\n                sessionStorage.setItem(\"patientId\", patientId);\r\n            });\r\n        }\r\n    }, [patientId]);\r\n\r\n    useEffect(() => {\r\n        if(patientId) {\r\n            ApiServices.getAllEncountersByUserId(parseInt(patientId)).then((data) => setPreviousEncounters(data));\r\n\r\n        }\r\n    }, [patientDetails]);\r\n\r\n    useEffect(() => {\r\n        // Fetch messages using the getConversationBySenderAndReceiver method\r\n        const fetchMessages = async () => {\r\n            try {\r\n                let doctorId = 0;\r\n                const userIdFromSession = sessionStorage.getItem(\"currentUserLoggedIn\");\r\n                if(userIdFromSession){\r\n                    const { userId } = JSON.parse(userIdFromSession);\r\n                    doctorId = userId;\r\n                }\r\n\r\n                // Fetch messages based on sender and receiver userIds\r\n                const conversationMessagesFromSender = await ApiServices.getConversationBySenderAndReceiver(\r\n                    parseInt(userId || '0'),// Patient's userId\r\n                    doctorId// Current user's userId\r\n                );\r\n                setMessages(conversationMessagesFromSender || []); // Set fetched messages in state\r\n\r\n                const conversationMessagesReply = await ApiServices.getConversationBySenderAndReceiver(\r\n                    doctorId,\r\n                    parseInt(userId || '0')\r\n                );\r\n                setMessagesReply(conversationMessagesReply || []);\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        if (userId) {\r\n            fetchMessages();\r\n        }\r\n    }, [userId]);\r\n\r\n    const handleAddCondition = () => {\r\n        if (conditions && conditions.length >= 0) {\r\n            const updatedConditions = [...conditions, '']; // Add an empty string for a new condition\r\n            setConditions(updatedConditions);\r\n        }\r\n    };\r\n\r\n    const handleConditionChange = (index: number, value: string) => {\r\n        const updatedConditions = [...conditions];\r\n        updatedConditions[index] = value;\r\n        setConditions(updatedConditions);\r\n    };\r\n\r\n    const formattedDate = (timestamp: string) => {\r\n        const date = new Date(timestamp);\r\n        const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };\r\n        return date.toLocaleDateString(undefined, options);\r\n    };\r\n\r\n    const formattedTime = (timestamp: string) => {\r\n        const date = new Date(timestamp);\r\n        return date.toLocaleTimeString();\r\n    };\r\n\r\n    const handleAddNote = async () => {\r\n        try {\r\n\r\n            // Create the encounter first\r\n            const encounterData = {\r\n                userId: parseInt(userId || ''),\r\n\r\n                timeStamp: new Date().toISOString()\r\n\r\n            };\r\n            const encounterCreation = await ApiServices.createEncounter(encounterData);\r\n\r\n\r\n            if (encounterCreation) {\r\n                // If encounter creation was successful, add the observation\r\n                const observationData = {\r\n                    observationText: note,\r\n                    observationDate: new Date().toISOString(),\r\n                    type: 'conditions',\r\n                };\r\n                console.log(\"Encounter is: \" + encounterCreation);\r\n\r\n\r\n                // Create the observation associated with the encounter\r\n            const observationCreation = await ApiServices.addObservationToEncounter(encounterCreation, observationData);\r\n\r\n                if (observationCreation) {\r\n                    // Observation created successfully and associated with the encounter\r\n                    console.log('Observation created:', observationCreation);\r\n                    // Perform any necessary action after successful creation\r\n                } else {\r\n                    console.error('Failed to create observation');\r\n                    // Handle failed observation creation\r\n                }\r\n            } else {\r\n                console.error('Failed to create encounter');\r\n                // Handle failed encounter creation\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            // Handle any other errors here\r\n        }\r\n    };\r\n\r\n    const styles: { [key: string]: CSSProperties } = {\r\n        container: {\r\n            padding: '20px',\r\n            maxWidth: '800px',\r\n            margin: '20px auto',\r\n            fontFamily: 'Arial, sans-serif',\r\n        },\r\n        section: {\r\n            marginBottom: '20px',\r\n        },\r\n        encounterSection: {\r\n            cursor: 'pointer',\r\n            marginTop: '10px',\r\n            padding: '10px',\r\n            background: '#f0f0f0',\r\n            borderRadius: '5px',\r\n        },\r\n        messagesSection: {\r\n            background: '#e9ecef',\r\n            padding: '10px',\r\n            borderRadius: '5px',\r\n        },\r\n        messageItem: {\r\n            padding: '5px 10px',\r\n            borderRadius: '5px',\r\n            background: '#f8f9fa',\r\n            margin: '5px 0',\r\n        },\r\n        textarea: {\r\n            width: '100%',\r\n            padding: '10px',\r\n            margin: '10px 0',\r\n            borderRadius: '5px',\r\n            border: '1px solid #ccc',\r\n            boxSizing: 'border-box',\r\n        },\r\n        button: {\r\n            background: '#007bff',\r\n            color: 'white',\r\n            padding: '10px 15px',\r\n            border: 'none',\r\n            borderRadius: '5px',\r\n            cursor: 'pointer',\r\n            margin: '5px 0',\r\n        },\r\n        input: {\r\n            padding: '10px',\r\n            margin: '10px 0',\r\n            borderRadius: '5px',\r\n            border: '1px solid #ccc',\r\n            width: 'calc(100% - 22px)',\r\n        },\r\n        heading: {\r\n            color: '#007bff',\r\n        },\r\n    };\r\n\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            {patientDetails && (\r\n                <div style={styles.section}>\r\n                    <h2 style={styles.heading}>Patient Details</h2>\r\n                    <p>Name: {patientDetails.firstname}</p>\r\n                    <p>Email: {patientDetails.email}</p>\r\n                    {/* Antag att du har fler patientdetaljer att visa här */}\r\n                </div>\r\n            )}\r\n    \r\n            <textarea\r\n                style={styles.textarea}\r\n                placeholder=\"Add note/message\"\r\n                value={note}\r\n                onChange={(e) => setNote(e.target.value)}\r\n            ></textarea>\r\n            <button style={styles.button} onClick={handleAddCondition}>Add Conditions</button>\r\n            {conditions.map((condition, index) => (\r\n                <div key={index}>\r\n                    <input\r\n                        style={styles.input}\r\n                        type=\"text\"\r\n                        value={condition}\r\n                        onChange={(e) => handleConditionChange(index, e.target.value)}\r\n                        placeholder={`Condition ${index + 1}`}\r\n                    />\r\n                </div>\r\n            ))}\r\n    \r\n            <div style={styles.section}>\r\n                <h3 style={styles.heading}>Messages</h3>\r\n                <div style={styles.messagesSection}>\r\n                    <h4 style={{ ...styles.heading, fontSize: '18px' }}>From Patients</h4>\r\n                    <ul style={{ listStyleType: 'none', padding: 0 }}>\r\n                        {messages.map((message, index) => (\r\n                            <li key={index} style={styles.messageItem}>\r\n                                <p>Content: {message.messageText}</p>\r\n                                {/* Kanske vill du visa mer information här */}\r\n                                <ul style={{ listStyleType: 'none', padding: '0' }}>\r\n                                    {messagesReply\r\n                                        .filter((reply) => reply.sender === message.receiver && reply.receiver === message.sender)\r\n                                        .map((messagereply, replyIndex) => (\r\n                                            <li key={replyIndex} style={{ ...styles.messageItem, background: '#d1ecf1' }}>\r\n                                                <p>My Replies: {messagereply.messageText}</p>\r\n                                            </li>\r\n                                        ))}\r\n                                </ul>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n    \r\n            <div style={styles.section}>\r\n                <h3 style={styles.heading}>Previous Encounters</h3>\r\n                {previousEncounters.map((encounter, index) => (\r\n                    <div key={index} style={styles.encounterSection} onClick={() => toggleExpand(encounter.id)}>\r\n                        <h4>Encounter ⬇ {formattedDate(encounter.encounterDate)}</h4>\r\n                        {expandedEncounterId === encounter.id && (\r\n                            <div>\r\n                                <p>Time: {formattedTime(encounter.encounterDate)}</p>\r\n                                <p>EncounterId: {encounter.id}</p>\r\n                                <p>Encounter Location: {encounter.location}</p>\r\n                                <div>\r\n                                    <h4>Observations</h4>\r\n                                    <ul style={{ listStyleType: 'none', padding: 0 }}>\r\n                                        {encounter.observations.map((observation, obsIndex) => (\r\n                                            <li key={obsIndex} style={styles.messageItem}>\r\n                                                <p>Type: {observation.type}</p>\r\n                                                <p>Message: {observation.observationText}</p>\r\n                                                <p>Observation Date: {formattedDate(observation.observationDate)}</p>\r\n                                                {/* Ytterligare observationdetaljer */}\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectedPatientPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}