{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamad H\\\\Desktop\\\\KTH\\\\TIDAA3\\\\Fullstack\\\\labbar\\\\Front\\\\FrontEnd\\\\j-client\\\\src\\\\components\\\\PatientPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// import ApiService from '../services/ApiServices'; // Du måste implementera denna service\n\nimport { useParams } from \"react-router-dom\";\nimport ApiServices from \"../services/ApiServices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientPage = () => {\n  _s();\n  const {\n    patientId\n  } = useParams();\n  const [patientDetails, setPatientDetails] = useState(); // Update 'any' with the actual patient details interface/type\n  const [doctorList, setStaffInfo] = useState([]);\n  const [otherList, setOtherList] = useState([]);\n  const [previousEncounters, setPreviousEncounters] = useState([]);\n  const [expandedEncounterId, setExpandedEncounterId] = useState(null);\n  const toggleExpand = encounterId => {\n    if (expandedEncounterId === encounterId) {\n      setExpandedEncounterId(null); // Collapse if already expanded\n    } else {\n      setExpandedEncounterId(encounterId); // Expand clicked encounter\n    }\n  };\n\n  const [userId, setUserId] = useState('');\n  const [patientInfo, setPatientInfo] = useState(null); // Använd för att lagra patientinformation\n  const [newDoctorMessage, setNewDoctorMessage] = useState('');\n  const [newOtherMessage, setNewOtherMessage] = useState('');\n  const [getAllSentMessages, setAllSentMessages] = useState([]);\n  const [getAllReceviedMessages, setAllReceviedMessages] = useState([]);\n  const [selectedDoctorId, setSelectedDoctorId] = useState('');\n  const [selectedDoctorName, setSelectedDoctorName] = useState('');\n  useEffect(() => {\n    if (patientId) {\n      // Fetch patient details based on the patientId using an API call\n      ApiServices.getPatientById(parseInt(patientId)).then(data => {\n        var _data$user$id;\n        setPatientDetails(data);\n        const senderId = (_data$user$id = data === null || data === void 0 ? void 0 : data.user.id) !== null && _data$user$id !== void 0 ? _data$user$id : 0; // Use nullish coalescing operator to handle undefined\n        setUserId(String(senderId)); // Update userId here once patientDetails are fetched\n      });\n\n      ApiServices.getAllEncountersByUserId(parseInt(patientId)).then(setPreviousEncounters);\n    }\n  }, [patientId]);\n  useEffect(() => {\n    const senderId = parseInt(userId);\n    if (senderId) {\n      ApiServices.getAllSentMessagesForUser(senderId).then(setAllSentMessages);\n      ApiServices.getAllReceivedMessagesForUser(senderId).then(setAllReceviedMessages);\n    }\n  }, [patientDetails]);\n  useEffect(() => {\n    ApiServices.getStaffInfo().then(data => {\n      // Filtrera baserat på staffType\n      const doctors = data.filter(item => item.staffType === 'Doctor');\n      const others = data.filter(item => item.staffType !== 'Doctor');\n\n      // Antag att setStaffInfo och setOtherList förväntar sig listor av StaffMember\n      setStaffInfo(doctors);\n      setOtherList(others);\n    });\n  }, []);\n  const sendMessage = (staffId, staffType) => {\n    var senderId = patientDetails === null || patientDetails === void 0 ? void 0 : patientDetails.user.id;\n    if (!senderId) {\n      senderId = 0;\n    }\n    const message = {\n      timeStamp: new Date().toISOString(),\n      sender: senderId,\n      receiver: staffId,\n      messageText: staffType === 'doctor' ? newDoctorMessage : newOtherMessage\n      // Add other necessary properties for the message\n    };\n\n    // Call the API to send the message\n    ApiServices.createMessage(message).then(response => {\n      console.log('sucesses');\n      if (staffType === 'doctor') {\n        setNewDoctorMessage('');\n      } else {\n        setNewOtherMessage('');\n      }\n    });\n    console.log(message);\n  };\n  const formattedDate = timestamp => {\n    const date = new Date(timestamp);\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    return date.toLocaleDateString(undefined, options);\n  };\n  const formattedTime = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: patientDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Patient Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"First Name: \", patientDetails.firstname]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Last Name: \", patientDetails.lastname]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Gender: \", patientDetails.gender]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", patientDetails.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Available Staff\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Doctors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: doctorList.map((doctor, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"First Name: \", doctor.firstname]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Last Name: \", doctor.lastname]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Email: \", doctor.email]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: newDoctorMessage,\n                onChange: e => setNewDoctorMessage(e.target.value),\n                placeholder: \"Write your message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => sendMessage(doctor.user.id, 'doctor'),\n                children: \"Message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Others\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: otherList.map((other, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"First Name: \", other.firstname]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Last Name: \", other.lastname]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Email: \", other.email]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Type: \", other.staffType]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: newOtherMessage,\n                onChange: e => setNewOtherMessage(e.target.value),\n                placeholder: \"Write your message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => sendMessage(other.user.id, 'other'),\n                children: \"Message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Sent Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this), getAllSentMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Content: \", msg.messageText]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Timestamp: \", formattedDate(msg.timeStamp)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sender: \", msg.sender]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Receiver: \", msg.receiver]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Recevied Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this), getAllReceviedMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Content: \", msg.messageText]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Timestamp: \", formattedDate(msg.timeStamp)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sender: \", msg.sender]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Receiver: \", msg.receiver]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Previous Encounters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: previousEncounters.map((encounter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              onClick: () => toggleExpand(encounter.id),\n              children: [\"Encounter \\u2B07 \", formattedDate(encounter.encounterDate)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 37\n            }, this), expandedEncounterId === encounter.id && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Time: \", formattedTime(encounter.encounterDate)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"EncounterId: \", encounter.id]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Encounter Location: \", encounter.location]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Observations\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: encounter.observations.map((observation, obsIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Type: \", observation.type]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 201,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Message: \", observation.observationText]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 202,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Observation Date: \", formattedDate(observation.observationDate)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 203,\n                      columnNumber: 61\n                    }, this)]\n                  }, obsIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n_s(PatientPage, \"3O5IqZM5bcWgkvysSuAAcBgHy+s=\", false, function () {\n  return [useParams];\n});\n_c = PatientPage;\nexport default PatientPage;\nvar _c;\n$RefreshReg$(_c, \"PatientPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","ApiServices","jsxDEV","_jsxDEV","PatientPage","_s","patientId","patientDetails","setPatientDetails","doctorList","setStaffInfo","otherList","setOtherList","previousEncounters","setPreviousEncounters","expandedEncounterId","setExpandedEncounterId","toggleExpand","encounterId","userId","setUserId","patientInfo","setPatientInfo","newDoctorMessage","setNewDoctorMessage","newOtherMessage","setNewOtherMessage","getAllSentMessages","setAllSentMessages","getAllReceviedMessages","setAllReceviedMessages","selectedDoctorId","setSelectedDoctorId","selectedDoctorName","setSelectedDoctorName","getPatientById","parseInt","then","data","_data$user$id","senderId","user","id","String","getAllEncountersByUserId","getAllSentMessagesForUser","getAllReceivedMessagesForUser","getStaffInfo","doctors","filter","item","staffType","others","sendMessage","staffId","message","timeStamp","Date","toISOString","sender","receiver","messageText","createMessage","response","console","log","formattedDate","timestamp","date","options","year","month","day","toLocaleDateString","undefined","formattedTime","toLocaleTimeString","children","fileName","_jsxFileName","lineNumber","columnNumber","firstname","lastname","gender","email","map","doctor","index","type","value","onChange","e","target","placeholder","onClick","other","msg","encounter","encounterDate","location","observations","observation","obsIndex","observationText","observationDate","_c","$RefreshReg$"],"sources":["C:/Users/Mohamad H/Desktop/KTH/TIDAA3/Fullstack/labbar/Front/FrontEnd/j-client/src/components/PatientPage.tsx"],"sourcesContent":["import React, {useState, useEffect, FormEvent, ChangeEvent} from 'react';\r\n// import ApiService from '../services/ApiServices'; // Du måste implementera denna service\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {EncounterForDisplay, Msg, Patient} from \"../interface/interface\";\r\nimport {StaffMember} from \"../interface/interface\";\r\nimport ApiServices from \"../services/ApiServices\";\r\nimport { number } from 'prop-types';\r\n\r\nconst PatientPage = () => {\r\n    const {patientId} = useParams<{ patientId?: string }>();\r\n    const [patientDetails, setPatientDetails] = useState<Patient>(); // Update 'any' with the actual patient details interface/type\r\n    const [doctorList, setStaffInfo] = useState<StaffMember[]>([]);\r\n    const [otherList, setOtherList] = useState<StaffMember[]>([]);\r\n    const [previousEncounters, setPreviousEncounters] = useState<EncounterForDisplay[]>([]);\r\n    const [expandedEncounterId, setExpandedEncounterId] = useState<number | null>(null);\r\n    const toggleExpand = (encounterId: number) => {\r\n        if (expandedEncounterId === encounterId) {\r\n            setExpandedEncounterId(null); // Collapse if already expanded\r\n        } else {\r\n            setExpandedEncounterId(encounterId); // Expand clicked encounter\r\n        }\r\n    };\r\n    const [userId, setUserId] = useState('');\r\n    const [patientInfo, setPatientInfo] = useState(null); // Använd för att lagra patientinformation\r\n    const [newDoctorMessage, setNewDoctorMessage] = useState('');\r\n    const [newOtherMessage, setNewOtherMessage] = useState('');\r\n    const [getAllSentMessages, setAllSentMessages] = useState<Msg[]>([]);\r\n    const [getAllReceviedMessages, setAllReceviedMessages] = useState<Msg[]>([]);\r\n    const [selectedDoctorId, setSelectedDoctorId] = useState('');\r\n    const [selectedDoctorName, setSelectedDoctorName] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (patientId) {\r\n            // Fetch patient details based on the patientId using an API call\r\n            ApiServices.getPatientById(parseInt(patientId)).then((data) => {\r\n                setPatientDetails(data);\r\n                const senderId = data?.user.id ?? 0; // Use nullish coalescing operator to handle undefined\r\n                setUserId(String(senderId)); // Update userId here once patientDetails are fetched\r\n            });\r\n            ApiServices.getAllEncountersByUserId(parseInt(patientId)).then(setPreviousEncounters);\r\n        }\r\n    }, [patientId]);\r\n\r\n    useEffect(() => {\r\n        const senderId = parseInt(userId);\r\n    if (senderId) {\r\n        ApiServices.getAllSentMessagesForUser(senderId).then(setAllSentMessages);\r\n        ApiServices.getAllReceivedMessagesForUser(senderId).then(setAllReceviedMessages);\r\n    }\r\n    }, [patientDetails]);\r\n\r\n    useEffect(() => {\r\n        ApiServices.getStaffInfo().then((data: StaffMember[]) => {\r\n            // Filtrera baserat på staffType\r\n            const doctors = data.filter(item => item.staffType === 'Doctor');\r\n            const others = data.filter(item => item.staffType !== 'Doctor');\r\n            \r\n            // Antag att setStaffInfo och setOtherList förväntar sig listor av StaffMember\r\n            setStaffInfo(doctors);\r\n            setOtherList(others);\r\n        });\r\n    },[]);\r\n\r\n    const sendMessage = (staffId: number, staffType: 'doctor' | 'other') => {\r\n\r\n        var senderId = patientDetails?.user.id\r\n        if (!senderId){\r\n            senderId = 0;\r\n        }\r\n\r\n        const message = {\r\n            timeStamp: new Date().toISOString(),\r\n            sender: senderId,\r\n            receiver: staffId,\r\n            messageText: staffType === 'doctor' ? newDoctorMessage : newOtherMessage,\r\n            // Add other necessary properties for the message\r\n        };\r\n\r\n        // Call the API to send the message\r\n        ApiServices.createMessage(message).then((response) => {\r\n            console.log('sucesses')\r\n            if (staffType === 'doctor') {\r\n                setNewDoctorMessage('');\r\n            } else {\r\n                setNewOtherMessage('');\r\n            }\r\n        });\r\n\r\n        console.log(message)\r\n    };\r\n\r\n\r\n    const formattedDate = (timestamp: string) => {\r\n        const date = new Date(timestamp);\r\n        const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };\r\n        return date.toLocaleDateString(undefined, options);\r\n    };\r\n\r\n    const formattedTime = (timestamp: string) => {\r\n        const date = new Date(timestamp);\r\n        return date.toLocaleTimeString();\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {patientDetails && (\r\n                <div>\r\n                    <h2>Patient Details</h2>\r\n                    <p>First Name: {patientDetails.firstname}</p>\r\n                    <p>Last Name: {patientDetails.lastname}</p>\r\n                    <p>Gender: {patientDetails.gender}</p>\r\n                    <p>Email: {patientDetails.email}</p>\r\n\r\n                    <div>\r\n                        <h3>Available Staff</h3>\r\n                        <div>\r\n                            <h4>Doctors</h4>\r\n                            <ul>\r\n                                {doctorList.map((doctor, index) => (\r\n                                    <li key={index}>\r\n                                        {/* Display doctor information */}\r\n                                        <p>First Name: {doctor.firstname}</p>\r\n                                        <p>Last Name: {doctor.lastname}</p>\r\n                                        <p>Email: {doctor.email}</p>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={newDoctorMessage}\r\n                                            onChange={(e) => setNewDoctorMessage(e.target.value)}\r\n                                            placeholder=\"Write your message\"\r\n                                        />\r\n                                        <button onClick={() => sendMessage(doctor.user.id, 'doctor')}>Message</button>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <h4>Others</h4>\r\n                            <ul>\r\n                                {otherList.map((other, index) => (\r\n                                    <li key={index}>\r\n                                        {/* Display other staff information */}\r\n                                        <p>First Name: {other.firstname}</p>\r\n                                        <p>Last Name: {other.lastname}</p>\r\n                                        <p>Email: {other.email}</p>\r\n                                        <p>Type: {other.staffType}</p>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={newOtherMessage}\r\n                                            onChange={(e) => setNewOtherMessage(e.target.value)}\r\n                                            placeholder=\"Write your message\"\r\n                                        />\r\n                                        <button onClick={() => sendMessage(other.user.id, 'other')}>Message</button>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Messages</h3>\r\n                        <h4>Sent Messages</h4>\r\n                        {getAllSentMessages\r\n            .map((msg, index) => (\r\n                            <div key={index}>\r\n                                <p>Content: {msg.messageText}</p>\r\n                                <p>Timestamp: {formattedDate(msg.timeStamp)}</p>\r\n                                <p>Sender: {msg.sender}</p>\r\n                                <p>Receiver: {msg.receiver}</p>\r\n                            </div>\r\n                        ))} \r\n                        <h4>Recevied Messages</h4>\r\n                        {getAllReceviedMessages\r\n            .map((msg, index) => (\r\n                            <div key={index}>\r\n                                <p>Content: {msg.messageText}</p>\r\n                                <p>Timestamp: {formattedDate(msg.timeStamp)}</p>\r\n                                <p>Sender: {msg.sender}</p>\r\n                                <p>Receiver: {msg.receiver}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div>\r\n                        <h3>Previous Encounters</h3>\r\n                        <div>\r\n                            {previousEncounters.map((encounter, index) => (\r\n                                <div key={index}>\r\n                                    <h4 onClick={() => toggleExpand(encounter.id)}>Encounter ⬇ {formattedDate(encounter.encounterDate)}</h4>\r\n                                    {expandedEncounterId === encounter.id && (\r\n                                        <div>\r\n                                            {/* Render encounter details */}\r\n                                            <p>Time: {formattedTime(encounter.encounterDate)}</p>\r\n                                            <p>EncounterId: {encounter.id}</p>\r\n                                            <p>Encounter Location: {encounter.location}</p>\r\n                                            <div>\r\n                                                <h4>Observations</h4>\r\n                                                <ul>\r\n                                                    {encounter.observations.map((observation, obsIndex) => (\r\n                                                        <li key={obsIndex}>\r\n                                                            {/* Render observation details */}\r\n                                                            <p>Type: {observation.type}</p>\r\n                                                            <p>Message: {observation.observationText}</p>\r\n                                                            <p>Observation Date: {formattedDate(observation.observationDate)}</p>\r\n                                                            {/* Other observation details */}\r\n                                                        </li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default PatientPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}