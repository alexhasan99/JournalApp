{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamad H\\\\Desktop\\\\KTH\\\\TIDAA3\\\\Fullstack\\\\labbar\\\\Front\\\\FrontEnd\\\\j-client\\\\src\\\\components\\\\Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport ApiService from '../services/ApiServices';\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from \"./UserSession\";\nimport ApiServices from \"../services/ApiServices\";\nimport Keycloak from 'keycloak-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [userType, setUserType] = useState('');\n  const [userId, setUserId] = useState();\n  const [patientDetails, setPatientDetails] = useState();\n  const [staffDetails, setStaffDetails] = useState();\n  const navigate = useNavigate();\n  const {\n    setUser\n  } = useContext(UserContext);\n  useEffect(() => {\n    // Kontrollera om användaren redan är autentiserad\n    console.log(localStorage.getItem(\"isAuthenticated\"));\n    //localStorage.setItem(\"isAuthenticated\", 'true')\n    if (localStorage.getItem('isAuthenticated') !== 'true') {\n      const initOptions = {\n        realm: \"Journal\",\n        url: \"http://localhost:8090/\",\n        clientId: \"frontend\"\n      };\n      const kc = new Keycloak(initOptions);\n      kc.init({\n        onLoad: 'login-required',\n        checkLoginIframe: true,\n        pkceMethod: 'S256'\n      }).then(auth => {\n        if (!auth) {\n          window.location.reload();\n        } else {\n          console.info(\"Authenticated\");\n          localStorage.setItem('isAuthenticated', 'true'); // Sätt flaggan för autentisering\n\n          // Spara nödvändig användarinfo om det behövs\n          const userInfo = {\n            token: kc.token,\n            userId: kc.subject\n          };\n          console.httpClient.defaults.headers.common['Authorization'] = `Bearer ${kc.token}`;\n          navigate('/'); // Ändra till önskad inloggningssida\n        }\n      }).catch(() => {\n        console.error(\"Authentication Failed\");\n      });\n    }\n    console.log(localStorage.getItem);\n  }, []);\n\n  // Om användaren redan är autentiserad, kanske du vill visa något annat här\n\n  useEffect(() => {\n    if (patientDetails) {\n      // Redirect after getting patient details\n      const parsedUserId = Number(patientDetails.id); // Convert to a number\n      if (!isNaN(parsedUserId)) {\n        setUserId(parsedUserId); // Update userId state\n        console.log(\"PatientDetails: \" + parsedUserId);\n        navigate(`/patient/${parsedUserId}`);\n      } else {\n        console.error(\"Invalid userId received from patientDetails:\", patientDetails.id);\n        // Handle the scenario where userId is not a valid number\n      }\n    }\n  }, [navigate, patientDetails]);\n  useEffect(() => {\n    if (staffDetails) {\n      // Redirect after getting patient details\n      const parsedUserId = Number(staffDetails.id); // Convert to a number\n      if (!isNaN(parsedUserId)) {\n        setUserId(parsedUserId); // Update userId state\n        console.log(\"PatientDetails: \" + parsedUserId);\n        navigate(`/staff/${parsedUserId}`);\n      } else {\n        console.error(\"Invalid userId received from patientDetails:\", staffDetails.id);\n        // Handle the scenario where userId is not a valid number\n      }\n    }\n  }, [navigate, staffDetails]);\n  const handleLogin = async e => {\n    e.preventDefault();\n    try {\n      const user = {\n        email,\n        password,\n        userType\n      };\n      const loginSuccess = await ApiService.loginUser(user);\n      console.log('Login Sucess: ', user);\n      if (loginSuccess) {\n        let data;\n        if (userType === 'PATIENT') {\n          data = await ApiService.getPatientByEmail(email);\n          setPatientDetails(data);\n        } else if (userType === 'STAFF') {\n          data = await ApiServices.getStaffByEmail(email);\n          setStaffDetails(data);\n          console.log(data);\n        }\n        if (data && data.id) {\n          setUserId(data.id);\n          setUser({\n            userId: data.id,\n            email,\n            userType\n          });\n          sessionStorage.setItem('currentUserLoggedIn', JSON.stringify({\n            id: data.id,\n            email,\n            userType,\n            userId: data.user.id\n          }));\n          alert('Login successful!\\nYou wrote: ' + email + ', ' + userType);\n        } else {\n          // Handle unexpected data format or missing data\n          alert('Failed to fetch user data');\n        }\n      } else {\n        // Handle incorrect credentials\n        alert('Invalid username or password');\n      }\n    } catch (error) {\n      // Handle API fetch error\n      console.error('Error:', error);\n      alert('Error occurred during login');\n    }\n  };\n  const handleRegister = () => {\n    navigate(\"/registerForm\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Role:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: userType,\n          onChange: e => setUserType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select role\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"PATIENT\",\n            children: \"Patient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"STAFF\",\n            children: \"Staff\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRegister,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n_s(LoginForm, \"FmnQ9phrJU0LW0hkxN6itxj6xbU=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useContext","useEffect","useState","ApiService","useNavigate","UserContext","ApiServices","Keycloak","jsxDEV","_jsxDEV","LoginForm","_s","email","setEmail","password","setPassword","userType","setUserType","userId","setUserId","patientDetails","setPatientDetails","staffDetails","setStaffDetails","navigate","setUser","console","log","localStorage","getItem","initOptions","realm","url","clientId","kc","init","onLoad","checkLoginIframe","pkceMethod","then","auth","window","location","reload","info","setItem","userInfo","token","subject","httpClient","defaults","headers","common","catch","error","parsedUserId","Number","id","isNaN","handleLogin","e","preventDefault","user","loginSuccess","loginUser","data","getPatientByEmail","getStaffByEmail","sessionStorage","JSON","stringify","alert","handleRegister","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Mohamad H/Desktop/KTH/TIDAA3/Fullstack/labbar/Front/FrontEnd/j-client/src/components/Home.tsx"],"sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport ApiService from '../services/ApiServices';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {Patient, PatientForPage, StaffMember, User} from \"../interface/interface\";\r\nimport {UserContext} from \"./UserSession\";\r\nimport ApiServices from \"../services/ApiServices\";\r\nimport Keycloak from 'keycloak-js';\r\nimport { httpClient } from './HttpClient';\r\n\r\nconst LoginForm = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [userType, setUserType] = useState('');\r\n    const [userId, setUserId] = useState<number| undefined>();\r\n    const [patientDetails, setPatientDetails] = useState<PatientForPage>();\r\n    const [staffDetails, setStaffDetails] = useState<StaffMember>();\r\n    const navigate = useNavigate();\r\n    const { setUser } = useContext(UserContext);\r\n\r\n   \r\n\r\n      useEffect(() => {\r\n        // Kontrollera om användaren redan är autentiserad\r\n        console.log(localStorage.getItem(\"isAuthenticated\"))\r\n        //localStorage.setItem(\"isAuthenticated\", 'true')\r\n        if (localStorage.getItem('isAuthenticated') !== 'true') {\r\n            const initOptions = {\r\n                realm: \"Journal\",\r\n                url: \"http://localhost:8090/\",\r\n                clientId: \"frontend\",\r\n            };\r\n            const kc = new Keycloak(initOptions);\r\n\r\n            kc.init({\r\n                onLoad: 'login-required',\r\n                checkLoginIframe: true,\r\n                pkceMethod: 'S256'\r\n            }).then(auth => {\r\n                if (!auth) {\r\n                    window.location.reload();\r\n                } else {\r\n                    console.info(\"Authenticated\");\r\n                    localStorage.setItem('isAuthenticated', 'true'); // Sätt flaggan för autentisering\r\n\r\n                    // Spara nödvändig användarinfo om det behövs\r\n                    const userInfo = { token: kc.token, userId: kc.subject };\r\n                    \r\n                    console.\r\n\r\n                    httpClient.defaults.headers.common['Authorization'] = `Bearer ${kc.token}`;\r\n\r\n                    navigate('/'); // Ändra till önskad inloggningssida\r\n                }\r\n            }).catch(() => {\r\n                console.error(\"Authentication Failed\");\r\n            });\r\n        }\r\n        console.log(localStorage.getItem)\r\n    }, []);\r\n\r\n    // Om användaren redan är autentiserad, kanske du vill visa något annat här\r\n\r\n\r\n    useEffect(() => {\r\n        if (patientDetails) {\r\n            // Redirect after getting patient details\r\n            const parsedUserId = Number(patientDetails.id); // Convert to a number\r\n            if (!isNaN(parsedUserId)) {\r\n                setUserId(parsedUserId); // Update userId state\r\n                console.log(\"PatientDetails: \" + parsedUserId);\r\n                navigate(`/patient/${parsedUserId}`);\r\n            } else {\r\n                console.error(\"Invalid userId received from patientDetails:\", patientDetails.id);\r\n                // Handle the scenario where userId is not a valid number\r\n            }\r\n        }\r\n    }, [navigate, patientDetails]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (staffDetails) {\r\n            // Redirect after getting patient details\r\n            const parsedUserId = Number(staffDetails.id); // Convert to a number\r\n            if (!isNaN(parsedUserId)) {\r\n                setUserId(parsedUserId); // Update userId state\r\n                console.log(\"PatientDetails: \" + parsedUserId);\r\n                navigate(`/staff/${parsedUserId}`);\r\n            } else {\r\n                console.error(\"Invalid userId received from patientDetails:\", staffDetails.id);\r\n                // Handle the scenario where userId is not a valid number\r\n            }\r\n        }\r\n    }, [navigate, staffDetails]);\r\n\r\n\r\n    const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const user = { email, password, userType };\r\n            const loginSuccess = await ApiService.loginUser(user);\r\n            console.log('Login Sucess: ', user)\r\n\r\n            if (loginSuccess) {\r\n                let data;\r\n                if (userType === 'PATIENT') {\r\n                    data = await ApiService.getPatientByEmail(email);\r\n                    setPatientDetails(data);\r\n                } else if (userType === 'STAFF') {\r\n                    data = await ApiServices.getStaffByEmail(email);\r\n                    setStaffDetails(data);\r\n                    console.log(data)\r\n                }\r\n                if (data && data.id) {\r\n                    setUserId(data.id);\r\n                    setUser({ userId: data.id, email, userType });\r\n                    sessionStorage.setItem('currentUserLoggedIn', JSON.stringify({ id: data.id, email, userType, userId:data.user.id }));\r\n\r\n\r\n                    alert('Login successful!\\nYou wrote: ' + email + ', ' + userType);\r\n                } else {\r\n                    // Handle unexpected data format or missing data\r\n                    alert('Failed to fetch user data');\r\n                }\r\n            } else {\r\n                // Handle incorrect credentials\r\n                alert('Invalid username or password');\r\n            }\r\n        } catch (error) {\r\n            // Handle API fetch error\r\n            console.error('Error:', error);\r\n            alert('Error occurred during login');\r\n        }\r\n    };\r\n\r\n    const handleRegister = () => {\r\n        navigate(\"/registerForm\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <form onSubmit={handleLogin}>\r\n                <label>\r\n                    Email:\r\n                    <input\r\n                        type=\"text\"\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Password:\r\n                    <input\r\n                        type=\"password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Role:\r\n                    <select value={userType} onChange={(e) => setUserType(e.target.value)}>\r\n                        <option value=\"\">Select role</option>\r\n                        <option value=\"PATIENT\">Patient</option>\r\n                        <option value=\"STAFF\">Staff</option>\r\n                    </select>\r\n                </label>\r\n                <br />\r\n                <button type=\"submit\">Login</button>\r\n                <button onClick={handleRegister}>Register</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default LoginForm;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}