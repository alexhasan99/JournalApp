{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamad H\\\\Desktop\\\\KTH\\\\TIDAA3\\\\Fullstack\\\\labbar\\\\Front\\\\FrontEnd\\\\j-client\\\\src\\\\components\\\\SelectedPatientPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ApiServices from \"../services/ApiServices\";\nimport DrawingForm from \"./DrawingForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectedPatientPage = () => {\n  _s();\n  const {\n    patientId\n  } = useParams();\n  const [patientDetails, setPatientDetails] = useState(); // Update 'any' with the actual patient details interface/type\n  const [previousEncounters, setPreviousEncounters] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [messagesReply, setMessagesReply] = useState([]);\n  const [previousObservations, setPreviousObservations] = useState();\n  const [listOfEncounterIds, setListOfEncounterIds] = useState([]);\n  const [note, setNote] = useState('');\n  const [encounterId, setEncounterId] = useState('');\n  const [userId, setUserId] = useState('');\n  const [conditions, setConditions] = useState([]);\n  const [expandedEncounterId, setExpandedEncounterId] = useState(null);\n  const toggleExpand = encounterId => {\n    if (expandedEncounterId === encounterId) {\n      setExpandedEncounterId(null); // Collapse if already expanded\n    } else {\n      setExpandedEncounterId(encounterId); // Expand clicked encounter\n    }\n  };\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (patientId) {\n      ApiServices.getPatientById(parseInt(patientId)).then(data => {\n        var _data$user$id;\n        setPatientDetails(data);\n        const userId = (_data$user$id = data === null || data === void 0 ? void 0 : data.user.id) !== null && _data$user$id !== void 0 ? _data$user$id : 0; // Use nullish coalescing operator to handle undefined\n        setUserId(String(userId)); // Update userId here once patientDetails are fetched\n        sessionStorage.setItem(\"patientId\", patientId);\n      });\n    }\n  }, [patientId]);\n  useEffect(() => {\n    if (patientId) {\n      ApiServices.getAllEncountersByUserId(parseInt(patientId)).then(data => setPreviousEncounters(data));\n    }\n  }, [patientDetails]);\n  useEffect(() => {\n    // Fetch messages using the getConversationBySenderAndReceiver method\n    const fetchMessages = async () => {\n      try {\n        let doctorId = 0;\n        const userIdFromSession = sessionStorage.getItem(\"currentUserLoggedIn\");\n        if (userIdFromSession) {\n          const {\n            userId\n          } = JSON.parse(userIdFromSession);\n          doctorId = userId;\n        }\n\n        // Fetch messages based on sender and receiver userIds\n        const conversationMessagesFromSender = await ApiServices.getConversationBySenderAndReceiver(parseInt(userId || '0'),\n        // Patient's userId\n        doctorId // Current user's userId\n        );\n\n        setMessages(conversationMessagesFromSender || []); // Set fetched messages in state\n\n        const conversationMessagesReply = await ApiServices.getConversationBySenderAndReceiver(doctorId, parseInt(userId || '0'));\n        setMessagesReply(conversationMessagesReply || []);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    if (userId) {\n      fetchMessages();\n    }\n  }, [userId]);\n  const handleAddCondition = () => {\n    if (conditions && conditions.length >= 0) {\n      const updatedConditions = [...conditions, '']; // Add an empty string for a new condition\n      setConditions(updatedConditions);\n    }\n  };\n  const handleConditionChange = (index, value) => {\n    const updatedConditions = [...conditions];\n    updatedConditions[index] = value;\n    setConditions(updatedConditions);\n  };\n  const formattedDate = timestamp => {\n    const date = new Date(timestamp);\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    return date.toLocaleDateString(undefined, options);\n  };\n  const formattedTime = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString();\n  };\n  const handleAddNote = async () => {\n    try {\n      // Create the encounter first\n      const encounterData = {\n        userId: parseInt(userId || ''),\n        timeStamp: new Date().toISOString()\n      };\n      const encounterCreation = await ApiServices.createEncounter(encounterData);\n      if (encounterCreation) {\n        // If encounter creation was successful, add the observation\n        const observationData = {\n          observationText: note,\n          observationDate: new Date().toISOString(),\n          type: 'conditions'\n        };\n        console.log(\"Encounter is: \" + encounterCreation);\n\n        // Create the observation associated with the encounter\n        const observationCreation = await ApiServices.addObservationToEncounter(encounterCreation, observationData);\n        if (observationCreation) {\n          // Observation created successfully and associated with the encounter\n          console.log('Observation created:', observationCreation);\n          // Perform any necessary action after successful creation\n        } else {\n          console.error('Failed to create observation');\n          // Handle failed observation creation\n        }\n      } else {\n        console.error('Failed to create encounter');\n        // Handle failed encounter creation\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle any other errors here\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [patientDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Patient Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", patientDetails.firstname]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", patientDetails.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Add note/message\",\n        value: note,\n        onChange: e => setNote(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddCondition,\n        children: \"Add Conditions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this), conditions.map((condition, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: condition,\n          onChange: e => handleConditionChange(index, e.target.value),\n          placeholder: `Condition ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"From Patients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Content: \", message.messageText]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: messagesReply.filter(reply => reply.sender === message.receiver && reply.receiver === message.sender).map((messagereply, replyIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"My Replys: \", messagereply.messageText]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 53\n                }, this)\n              }, replyIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 49\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Previous Encounters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: previousEncounters.map((encounter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              onClick: () => toggleExpand(encounter.id),\n              children: [\"Encounter \\u2B07 \", formattedDate(encounter.encounterDate)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 37\n            }, this), expandedEncounterId === encounter.id && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Time: \", formattedTime(encounter.encounterDate)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"EncounterId: \", encounter.id]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Encounter Location: \", encounter.location]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Observations\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: encounter.observations.map((observation, obsIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Type: \", observation.type]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 218,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Message: \", observation.observationText]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 219,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Observation Date: \", formattedDate(observation.observationDate)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 220,\n                      columnNumber: 61\n                    }, this)]\n                  }, obsIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 216,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(DrawingForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectedPatientPage, \"kkwDKFxmgLerViH+ysBHrK3dHhQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = SelectedPatientPage;\nexport default SelectedPatientPage;\nvar _c;\n$RefreshReg$(_c, \"SelectedPatientPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","ApiServices","DrawingForm","jsxDEV","_jsxDEV","SelectedPatientPage","_s","patientId","patientDetails","setPatientDetails","previousEncounters","setPreviousEncounters","messages","setMessages","messagesReply","setMessagesReply","previousObservations","setPreviousObservations","listOfEncounterIds","setListOfEncounterIds","note","setNote","encounterId","setEncounterId","userId","setUserId","conditions","setConditions","expandedEncounterId","setExpandedEncounterId","toggleExpand","navigate","getPatientById","parseInt","then","data","_data$user$id","user","id","String","sessionStorage","setItem","getAllEncountersByUserId","fetchMessages","doctorId","userIdFromSession","getItem","JSON","parse","conversationMessagesFromSender","getConversationBySenderAndReceiver","conversationMessagesReply","error","console","handleAddCondition","length","updatedConditions","handleConditionChange","index","value","formattedDate","timestamp","date","Date","options","year","month","day","toLocaleDateString","undefined","formattedTime","toLocaleTimeString","handleAddNote","encounterData","timeStamp","toISOString","encounterCreation","createEncounter","observationData","observationText","observationDate","type","log","observationCreation","addObservationToEncounter","children","fileName","_jsxFileName","lineNumber","columnNumber","firstname","email","placeholder","onChange","e","target","onClick","map","condition","message","messageText","filter","reply","sender","receiver","messagereply","replyIndex","encounter","encounterDate","location","observations","observation","obsIndex","_c","$RefreshReg$"],"sources":["C:/Users/Mohamad H/Desktop/KTH/TIDAA3/Fullstack/labbar/Front/FrontEnd/j-client/src/components/SelectedPatientPage.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {EncounterForDisplay, Msg, Observation, Patient} from \"../interface/interface\";\r\nimport ApiServices from \"../services/ApiServices\";\r\nimport ApiService from \"../services/ApiServices\";\r\nimport DrawingForm from \"./DrawingForm\";\r\n\r\n\r\nconst SelectedPatientPage = () => {\r\n    const {patientId} = useParams<{ patientId?: string }>();\r\n    const [patientDetails, setPatientDetails] = useState<Patient>(); // Update 'any' with the actual patient details interface/type\r\n    const [previousEncounters, setPreviousEncounters] = useState<EncounterForDisplay[]>([]);\r\n    const [messages, setMessages] = useState<Msg[]>([]);\r\n    const [messagesReply, setMessagesReply] = useState<Msg[]>([]);\r\n    const [previousObservations, setPreviousObservations] = useState<Observation>();\r\n    const [listOfEncounterIds, setListOfEncounterIds] = useState<number[]>([]);\r\n    const [note, setNote] = useState('');\r\n    const [encounterId, setEncounterId] = useState('');\r\n    const [userId, setUserId] = useState('');\r\n    const [conditions, setConditions] = useState<string[]>([]);\r\n    const [expandedEncounterId, setExpandedEncounterId] = useState<number | null>(null);\r\n    const toggleExpand = (encounterId: number) => {\r\n        if (expandedEncounterId === encounterId) {\r\n            setExpandedEncounterId(null); // Collapse if already expanded\r\n        } else {\r\n            setExpandedEncounterId(encounterId); // Expand clicked encounter\r\n        }\r\n    };\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (patientId) {\r\n            ApiServices.getPatientById(parseInt(patientId)).then((data) => {\r\n                setPatientDetails(data);\r\n                const userId = data?.user.id ?? 0; // Use nullish coalescing operator to handle undefined\r\n                setUserId(String(userId)); // Update userId here once patientDetails are fetched\r\n                sessionStorage.setItem(\"patientId\", patientId);\r\n            });\r\n        }\r\n    }, [patientId]);\r\n\r\n    useEffect(() => {\r\n        if(patientId) {\r\n            ApiServices.getAllEncountersByUserId(parseInt(patientId)).then((data) => setPreviousEncounters(data));\r\n\r\n        }\r\n    }, [patientDetails]);\r\n\r\n    useEffect(() => {\r\n        // Fetch messages using the getConversationBySenderAndReceiver method\r\n        const fetchMessages = async () => {\r\n            try {\r\n                let doctorId = 0;\r\n                const userIdFromSession = sessionStorage.getItem(\"currentUserLoggedIn\");\r\n                if(userIdFromSession){\r\n                    const { userId } = JSON.parse(userIdFromSession);\r\n                    doctorId = userId;\r\n                }\r\n\r\n                // Fetch messages based on sender and receiver userIds\r\n                const conversationMessagesFromSender = await ApiServices.getConversationBySenderAndReceiver(\r\n                    parseInt(userId || '0'),// Patient's userId\r\n                    doctorId// Current user's userId\r\n                );\r\n                setMessages(conversationMessagesFromSender || []); // Set fetched messages in state\r\n\r\n                const conversationMessagesReply = await ApiServices.getConversationBySenderAndReceiver(\r\n                    doctorId,\r\n                    parseInt(userId || '0')\r\n                );\r\n                setMessagesReply(conversationMessagesReply || []);\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        if (userId) {\r\n            fetchMessages();\r\n        }\r\n    }, [userId]);\r\n\r\n    const handleAddCondition = () => {\r\n        if (conditions && conditions.length >= 0) {\r\n            const updatedConditions = [...conditions, '']; // Add an empty string for a new condition\r\n            setConditions(updatedConditions);\r\n        }\r\n    };\r\n\r\n    const handleConditionChange = (index: number, value: string) => {\r\n        const updatedConditions = [...conditions];\r\n        updatedConditions[index] = value;\r\n        setConditions(updatedConditions);\r\n    };\r\n\r\n    const formattedDate = (timestamp: string) => {\r\n        const date = new Date(timestamp);\r\n        const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };\r\n        return date.toLocaleDateString(undefined, options);\r\n    };\r\n\r\n    const formattedTime = (timestamp: string) => {\r\n        const date = new Date(timestamp);\r\n        return date.toLocaleTimeString();\r\n    };\r\n\r\n    const handleAddNote = async () => {\r\n        try {\r\n\r\n            // Create the encounter first\r\n            const encounterData = {\r\n                userId: parseInt(userId || ''),\r\n\r\n                timeStamp: new Date().toISOString()\r\n\r\n            };\r\n            const encounterCreation = await ApiServices.createEncounter(encounterData);\r\n\r\n\r\n            if (encounterCreation) {\r\n                // If encounter creation was successful, add the observation\r\n                const observationData = {\r\n                    observationText: note,\r\n                    observationDate: new Date().toISOString(),\r\n                    type: 'conditions',\r\n                };\r\n                console.log(\"Encounter is: \" + encounterCreation);\r\n\r\n\r\n                // Create the observation associated with the encounter\r\n            const observationCreation = await ApiServices.addObservationToEncounter(encounterCreation, observationData);\r\n\r\n                if (observationCreation) {\r\n                    // Observation created successfully and associated with the encounter\r\n                    console.log('Observation created:', observationCreation);\r\n                    // Perform any necessary action after successful creation\r\n                } else {\r\n                    console.error('Failed to create observation');\r\n                    // Handle failed observation creation\r\n                }\r\n            } else {\r\n                console.error('Failed to create encounter');\r\n                // Handle failed encounter creation\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            // Handle any other errors here\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {patientDetails && (\r\n                <div>\r\n                    <h2>Patient Details</h2>\r\n                    <p>Name: {patientDetails.firstname}</p>\r\n                    <p>Email: {patientDetails.email}</p>\r\n                    {/* Display other patient details */}\r\n                    <textarea\r\n                        placeholder=\"Add note/message\"\r\n                        value={note}\r\n                        onChange={(e) => setNote(e.target.value)}\r\n                    ></textarea>\r\n                    {/*<button onClick={}>Add Note</button>*/}\r\n                    <button onClick={handleAddCondition}>Add Conditions</button>\r\n                    {conditions.map((condition, index) => (\r\n                        <div key={index}>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={condition}\r\n                                onChange={(e) => handleConditionChange(index, e.target.value)}\r\n                                placeholder={`Condition ${index + 1}`}\r\n                            />\r\n\r\n                        </div>\r\n                    ))}\r\n                    <div>\r\n                        <h3>Messages</h3>\r\n                        <h4>From Patients</h4>\r\n                        {/* Display messages */}\r\n                        <ul>\r\n                            {messages.map((message, index) => (\r\n                                <li key={index}>\r\n                                    {/* Display message details */}\r\n                                    <p>Content: {message.messageText}</p>\r\n                                    {/* Display other message details */}\r\n                                    <ul>\r\n                                        {messagesReply\r\n                                            .filter((reply) => reply.sender === message.receiver && reply.receiver === message.sender)\r\n                                            .map((messagereply, replyIndex) => (\r\n                                                <li key={replyIndex}>\r\n                                                    <p>My Replys: {messagereply.messageText}</p>\r\n                                                </li>\r\n                                            ))}\r\n                                    </ul>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Previous Encounters</h3>\r\n                        <div>\r\n                            {previousEncounters.map((encounter, index) => (\r\n                                <div key={index}>\r\n                                    <h4 onClick={() => toggleExpand(encounter.id)}>Encounter ⬇ {formattedDate(encounter.encounterDate)}</h4>\r\n                                    {expandedEncounterId === encounter.id && (\r\n                                        <div>\r\n                                            {/* Render encounter details */}\r\n                                            <p>Time: {formattedTime(encounter.encounterDate)}</p>\r\n                                            <p>EncounterId: {encounter.id}</p>\r\n                                            <p>Encounter Location: {encounter.location}</p>\r\n                                            <div>\r\n                                                <h4>Observations</h4>\r\n                                                <ul>\r\n                                                    {encounter.observations.map((observation, obsIndex) => (\r\n                                                        <li key={obsIndex}>\r\n                                                            {/* Render observation details */}\r\n                                                            <p>Type: {observation.type}</p>\r\n                                                            <p>Message: {observation.observationText}</p>\r\n                                                            <p>Observation Date: {formattedDate(observation.observationDate)}</p>\r\n                                                            {/* Other observation details */}\r\n                                                        </li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <ul>\r\n                <DrawingForm />\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectedPatientPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}