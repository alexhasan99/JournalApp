{"ast":null,"code":"import Keycloak from 'keycloak-js';\nconst API_BASE_URL = 'http://localhost:8080/api'; // Byt ut med din backend URL\nconst API_BASE_URL_QUARKUS = 'http://localhost:8083';\nconst keycloak = new Keycloak('/keycloak.json');\nconst ApiService = {\n  getPatients: async () => {\n    // Kontrollera om användaren är autentiserad och hämta token\n    if (keycloak.authenticated) {\n      const token = await keycloak.token;\n      return fetch(`${API_BASE_URL}/patients`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Nätverksfel vid hämtning av data');\n        }\n        return response.json();\n      });\n    } else {\n      throw new Error('Användare inte inloggad');\n    }\n  },\n  getPatientById: id => {\n    return fetch(`${API_BASE_URL}/patients/${id}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getPatientByEmail: email => {\n    return fetch(`${API_BASE_URL}/patients/email/${email}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getPatientByUserId: userId => {\n    return fetch(`${API_BASE_URL}/patients/userId/${userId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getAllStaff: () => {\n    return fetch(`${API_BASE_URL}/staffs`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av staff data');\n      }\n      return response.json();\n    });\n  },\n  getStaffById: id => {\n    return fetch(`${API_BASE_URL}/staffs/${id}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av staff');\n      }\n      return response.json();\n    });\n  },\n  getStaffByEmail: email => {\n    return fetch(`${API_BASE_URL}/staffs/email/${email}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av staff');\n      }\n      return response.json();\n    });\n  },\n  getUserIdByPatientId: id => {\n    return fetch(`${API_BASE_URL}/patients/${id}/userId`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getConversationBySenderAndReceiver: (sender, receiver) => {\n    return fetch(`${API_BASE_URL}/massages/conversation/${sender}/${receiver}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getMessages: () => {\n    return fetch(`${API_BASE_URL}/massages`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av meddelanden');\n      }\n      return response.json();\n    });\n  },\n  getAllSentMessagesForUser: userId => {\n    return fetch(`${API_BASE_URL}/massages/sent/${userId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av meddelanden');\n      }\n      return response.json();\n    });\n  },\n  getAllReceivedMessagesForUser: userId => {\n    return fetch(`${API_BASE_URL}/massages/rec/${userId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av meddelanden');\n      }\n      return response.json();\n    });\n  },\n  getConversationById: otherUserId => {\n    return fetch(`${API_BASE_URL}/msgs/conversation/${otherUserId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av meddelanden');\n      }\n      return response.json();\n    });\n  },\n  getStaffInfo: () => {\n    return fetch(`${API_BASE_URL}/staffs`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getEncounterByPatientId: patientId => {\n    return fetch(`${API_BASE_URL}/encounter/patients/${patientId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getUsers: () => {\n    return fetch(`${API_BASE_URL}/users`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getAllEncountersByUserId: userId => {\n    return fetch(`${API_BASE_URL}/encounters/patient/${userId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getAllEncounterIdsByUserId: userId => {\n    return fetch(`${API_BASE_URL}/encounter/patient/encounterId/${userId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getObservationByEncounterId: encounterId => {\n    return fetch(`${API_BASE_URL}/observations/encounter/${encounterId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getImageById: imageId => {\n    return fetch(`${API_BASE_URL}/images/${imageId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  getAllImages: patientId => {\n    return fetch(`${API_BASE_URL}/images/patient/${patientId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid hämtning av data');\n      }\n      return response.json();\n    });\n  },\n  createImage: async image => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/images`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(image)\n      });\n      if (!response.ok) {\n        throw new Error(`Creating Image failed`);\n      }\n      return true;\n    } catch (error) {\n      console.error('Message Error:', error);\n      throw new Error('Image failed');\n    }\n  },\n  updateImageById: async (imageId, updatedDetails) => {\n    try {\n      // Make a PUT request to update the image details\n      const response = await fetch(`${API_BASE_URL}/images/${imageId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedDetails)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update image details');\n      }\n\n      // Return the updated image details\n      return response.json();\n    } catch (error) {\n      console.error('Error updating image details:', error);\n      throw error; // Rethrow the error to handle it in the component\n    }\n  },\n\n  createEncounter: async encounter => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/encounter`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(encounter)\n      });\n      if (!response.ok) {\n        throw new Error('Encounter failed at apiService');\n      }\n\n      // Parse response body as JSON\n      return await response.json(); // Return the created encounter object\n    } catch (error) {\n      console.error('Encounter creation Error at Catch:', error);\n      throw new Error('Encounter creation failed as throw in Catch:'); // Throw error for failed registration\n    }\n  },\n\n  createObservation: async (patientId, observation) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/patient/${patientId}/observation`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(observation)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add observation');\n      }\n      return true; // Indicate successful registration\n    } catch (error) {\n      console.error('Add Observation Error:', error);\n      throw new Error('Failed to add observation'); // Throw error for failed registration\n    }\n  },\n\n  addObservationToEncounter: async (encounterId, observation) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/encounter/${encounterId}/observation`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(observation)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add observation to encounter, response not ok');\n      }\n      return response.json(); // Return response JSON data if needed\n    } catch (error) {\n      console.error('Error:', error);\n      throw new Error('Failed to add observation to encounter, were caught');\n    }\n  },\n  registerUser: async user => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      });\n      if (!response.ok) {\n        throw new Error('Registration failed');\n      }\n      return true; // Indicate successful registration\n    } catch (error) {\n      console.error('Registration Error:', error);\n      throw new Error('Registration failed'); // Throw error for failed registration\n    }\n  },\n\n  loginUser: async user => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      });\n      if (!response.ok) {\n        throw new Error('LogIn failed');\n      }\n      return true; // Indicate successful registration\n    } catch (error) {\n      console.error('LogIn Error:', error);\n      throw new Error('LogIn failed'); // Throw error for failed registration\n    }\n  },\n\n  createMessage: async message => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/massages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(message)\n      });\n      if (!response.ok) {\n        throw new Error('Creating message failed');\n      }\n      return true; // Indicate successful registration\n    } catch (error) {\n      console.error('Message Error:', error);\n      throw new Error('Message failed'); // Throw error for failed registration\n    }\n  },\n\n  searchPatientsByName: async name => {\n    try {\n      const response = await fetch(`${API_BASE_URL_QUARKUS}/patients/search/${name}`);\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid sökning av patienter efter namn');\n      }\n      const data = response.json();\n      console.log(data);\n      return data;\n    } catch (error) {\n      console.error('Fel vid sökning av patienter efter namn:', error);\n      throw new Error('Sökning av patienter efter namn misslyckades');\n    }\n  },\n  searchPatientsByGender: async gender => {\n    try {\n      const response = await fetch(`${API_BASE_URL_QUARKUS}/patients/searchByGender/${gender}`);\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid sökning av patienter efter kön');\n      }\n      const data = response.json();\n      console.log(data);\n      return data;\n    } catch (error) {\n      console.error('Fel vid sökning av patienter efter kön:', error);\n      throw new Error('Sökning av patienter efter kön misslyckades');\n    }\n  },\n  searchPatientsByCondition: async condition => {\n    try {\n      const response = await fetch(`${API_BASE_URL_QUARKUS}/patients/searchByCondition/${condition}`);\n      if (!response.ok) {\n        throw new Error('Nätverksfel vid sökning av patienter efter tillstånd');\n      }\n      const data = response.json(); // Använd await för att vänta på att Promise ska lösa sig\n      console.log(data); // Logga datan för att se till att den har hämtats korrekt\n      return data;\n    } catch (error) {\n      console.error('Fel vid sökning av patienter efter tillstånd:', error);\n      throw new Error('Sökning av patienter efter tillstånd misslyckades');\n    }\n  }\n};\nexport default ApiService;","map":{"version":3,"names":["Keycloak","API_BASE_URL","API_BASE_URL_QUARKUS","keycloak","ApiService","getPatients","authenticated","token","fetch","headers","then","response","ok","Error","json","getPatientById","id","getPatientByEmail","email","getPatientByUserId","userId","getAllStaff","getStaffById","getStaffByEmail","getUserIdByPatientId","getConversationBySenderAndReceiver","sender","receiver","getMessages","getAllSentMessagesForUser","getAllReceivedMessagesForUser","getConversationById","otherUserId","getStaffInfo","getEncounterByPatientId","patientId","getUsers","getAllEncountersByUserId","getAllEncounterIdsByUserId","getObservationByEncounterId","encounterId","getImageById","imageId","getAllImages","createImage","image","method","body","JSON","stringify","error","console","updateImageById","updatedDetails","createEncounter","encounter","createObservation","observation","addObservationToEncounter","registerUser","user","loginUser","createMessage","message","searchPatientsByName","name","data","log","searchPatientsByGender","gender","searchPatientsByCondition","condition"],"sources":["C:/Users/Mohamad H/Desktop/KTH/TIDAA3/Fullstack/labbar/Front/FrontEnd/j-client/src/services/ApiServices.tsx"],"sourcesContent":["import Keycloak from 'keycloak-js';\r\nimport {\r\n    Encounter,\r\n    LoginUser,\r\n    Msg,\r\n    Observation,\r\n    User,\r\n    ImageCreation,\r\n    Patient,\r\n    PatientForSearch\r\n} from \"../interface/interface\";\r\n\r\n\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api'; // Byt ut med din backend URL\r\nconst API_BASE_URL_QUARKUS = 'http://localhost:8083';\r\n\r\nconst keycloak = new Keycloak ('/keycloak.json');\r\n\r\nconst ApiService = {\r\n    getPatients: async () => {\r\n        // Kontrollera om användaren är autentiserad och hämta token\r\n        if (keycloak.authenticated) {\r\n          const token = await keycloak.token;\r\n    \r\n          return fetch(`${API_BASE_URL}/patients`, {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`,\r\n              'Content-Type': 'application/json',\r\n            },\r\n          })\r\n          .then(response => {\r\n            if (!response.ok) {\r\n              throw new Error('Nätverksfel vid hämtning av data');\r\n            }\r\n            return response.json();\r\n          });\r\n        } else {\r\n          throw new Error('Användare inte inloggad');\r\n        }\r\n      },\r\n    getPatientById: (id: number) => {\r\n        return fetch(`${API_BASE_URL}/patients/${id}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getPatientByEmail: (email: string) => {\r\n        return fetch(`${API_BASE_URL}/patients/email/${email}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getPatientByUserId: (userId: number) => {\r\n        return fetch(`${API_BASE_URL}/patients/userId/${userId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getAllStaff: () => {\r\n        return fetch(`${API_BASE_URL}/staffs`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av staff data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getStaffById: (id: number) => {\r\n        return fetch(`${API_BASE_URL}/staffs/${id}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av staff');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n\r\n    getStaffByEmail: (email: string) => {\r\n        return fetch(`${API_BASE_URL}/staffs/email/${email}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av staff');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getUserIdByPatientId: (id: number) => {\r\n        return fetch(`${API_BASE_URL}/patients/${id}/userId`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getConversationBySenderAndReceiver: (sender: number, receiver: number) => {\r\n        return fetch(`${API_BASE_URL}/massages/conversation/${sender}/${receiver}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getMessages: () => {\r\n        return fetch(`${API_BASE_URL}/massages`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av meddelanden');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getAllSentMessagesForUser: (userId: number) => {\r\n        return fetch(`${API_BASE_URL}/massages/sent/${userId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av meddelanden');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getAllReceivedMessagesForUser: (userId: number) => {\r\n        return fetch(`${API_BASE_URL}/massages/rec/${userId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av meddelanden');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getConversationById: (otherUserId: number) => {\r\n        return fetch(`${API_BASE_URL}/msgs/conversation/${otherUserId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av meddelanden');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getStaffInfo: () => {\r\n        return fetch(`${API_BASE_URL}/staffs`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getEncounterByPatientId: (patientId: number) => {\r\n        return fetch(`${API_BASE_URL}/encounter/patients/${patientId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getUsers: () => {\r\n        return fetch(`${API_BASE_URL}/users`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getAllEncountersByUserId: (userId: number) => {\r\n        return fetch(`${API_BASE_URL}/encounters/patient/${userId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getAllEncounterIdsByUserId: (userId: number) => {\r\n        return fetch(`${API_BASE_URL}/encounter/patient/encounterId/${userId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getObservationByEncounterId: (encounterId: number) => {\r\n        return fetch(`${API_BASE_URL}/observations/encounter/${encounterId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getImageById: (imageId: number) => {\r\n        return fetch(`${API_BASE_URL}/images/${imageId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    getAllImages: (patientId: number) => {\r\n        return fetch(`${API_BASE_URL}/images/patient/${patientId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Nätverksfel vid hämtning av data');\r\n                }\r\n                return response.json();\r\n            });\r\n    },\r\n    createImage: async (image: ImageCreation) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/images`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(image),\r\n            });\r\n            if (!response.ok) {\r\n                throw  new Error(`Creating Image failed`);\r\n            }\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Message Error:', error);\r\n            throw new Error('Image failed');\r\n        }\r\n    },\r\n    updateImageById: async (imageId: number, updatedDetails: ImageCreation) => {\r\n        try {\r\n            // Make a PUT request to update the image details\r\n            const response = await fetch(`${API_BASE_URL}/images/${imageId}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(updatedDetails),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to update image details');\r\n            }\r\n\r\n            // Return the updated image details\r\n            return response.json();\r\n        } catch (error) {\r\n            console.error('Error updating image details:', error);\r\n            throw error; // Rethrow the error to handle it in the component\r\n        }\r\n    },\r\n    createEncounter: async (encounter: Encounter) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/encounter`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(encounter),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Encounter failed at apiService');\r\n            }\r\n\r\n\r\n             // Parse response body as JSON\r\n            return await response.json(); // Return the created encounter object\r\n        } catch (error) {\r\n            console.error('Encounter creation Error at Catch:', error);\r\n            throw new Error('Encounter creation failed as throw in Catch:'); // Throw error for failed registration\r\n        }\r\n    },\r\n    createObservation: async (patientId: number, observation: Observation) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/patient/${patientId}/observation`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(observation),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to add observation');\r\n            }\r\n\r\n            return true; // Indicate successful registration\r\n        } catch (error) {\r\n            console.error('Add Observation Error:', error);\r\n            throw new Error('Failed to add observation'); // Throw error for failed registration\r\n        }\r\n    },\r\n    addObservationToEncounter: async (encounterId: number, observation: Observation) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/encounter/${encounterId}/observation`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(observation),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to add observation to encounter, response not ok');\r\n            }\r\n\r\n            return response.json(); // Return response JSON data if needed\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            throw new Error('Failed to add observation to encounter, were caught');\r\n        }\r\n    },\r\n    registerUser: async (user: User) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/create`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(user),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Registration failed');\r\n            }\r\n\r\n            return true; // Indicate successful registration\r\n        } catch (error) {\r\n            console.error('Registration Error:', error);\r\n            throw new Error('Registration failed'); // Throw error for failed registration\r\n        }\r\n    },\r\n    loginUser: async (user: LoginUser) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/users/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(user),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('LogIn failed');\r\n            }\r\n\r\n            return true; // Indicate successful registration\r\n        } catch (error) {\r\n            console.error('LogIn Error:', error);\r\n            throw new Error('LogIn failed'); // Throw error for failed registration\r\n        }\r\n    },\r\n    createMessage: async (message: Msg) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/massages`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(message),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Creating message failed');\r\n            }\r\n\r\n            return true; // Indicate successful registration\r\n        } catch (error) {\r\n            console.error('Message Error:', error);\r\n            throw new Error('Message failed'); // Throw error for failed registration\r\n        }\r\n    },\r\n    searchPatientsByName: async (name: string): Promise<PatientForSearch[]> => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL_QUARKUS}/patients/search/${name}`);\r\n            if (!response.ok) {\r\n                throw new Error('Nätverksfel vid sökning av patienter efter namn');\r\n            }\r\n            const data = response.json()\r\n            console.log(data)\r\n            return data\r\n        } catch (error) {\r\n            console.error('Fel vid sökning av patienter efter namn:', error);\r\n            throw new Error('Sökning av patienter efter namn misslyckades');\r\n        }\r\n    },\r\n    searchPatientsByGender: async (gender: string): Promise<PatientForSearch[]> => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL_QUARKUS}/patients/searchByGender/${gender}`);\r\n            if (!response.ok) {\r\n                throw new Error('Nätverksfel vid sökning av patienter efter kön');\r\n            }\r\n            const data = response.json()\r\n            console.log(data)\r\n            return data\r\n        } catch (error) {\r\n            console.error('Fel vid sökning av patienter efter kön:', error);\r\n            throw new Error('Sökning av patienter efter kön misslyckades');\r\n        }\r\n    },\r\n    searchPatientsByCondition: async (condition: string): Promise<PatientForSearch[]> => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL_QUARKUS}/patients/searchByCondition/${condition}`);\r\n            if (!response.ok) {\r\n                throw new Error('Nätverksfel vid sökning av patienter efter tillstånd');\r\n            }\r\n            const data =  response.json(); // Använd await för att vänta på att Promise ska lösa sig\r\n            console.log(data); // Logga datan för att se till att den har hämtats korrekt\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Fel vid sökning av patienter efter tillstånd:', error);\r\n            throw new Error('Sökning av patienter efter tillstånd misslyckades');\r\n        }\r\n    }\r\n};\r\n\r\nexport default ApiService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}