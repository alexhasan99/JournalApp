{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamad H\\\\Desktop\\\\KTH\\\\TIDAA3\\\\Fullstack\\\\labbar\\\\Front\\\\FrontEnd\\\\j-client\\\\src\\\\components\\\\DoctorPage.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport ApiService from '../services/ApiServices';\nimport ApiServices from \"../services/ApiServices\";\nimport PatientSearchForm from './PatientSearchForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageItem = ({\n  message,\n  handleReply\n}) => {\n  _s();\n  const [newReplyContent, setNewReplyContent] = useState('');\n  const [senderName, setSenderName] = useState('');\n  const [messageSent, setMessageSent] = useState(false);\n  const handleSendReply = async () => {\n    try {\n      // Call handleReply and pass the receiver's userId and newReplyContent\n      await handleReply(message.sender, newReplyContent);\n      setMessageSent(true); // Set message sent to true after successful send\n      alert(\"Message successfully sent!\");\n      setNewReplyContent(''); // Clear the reply input after sending\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchSenderName = async () => {\n      try {\n        const senderData = await ApiServices.getPatientByUserId(message.sender);\n        if (senderData) {\n          setSenderName(senderData.name || 'Unknown');\n        } else {\n          setSenderName('Unknown');\n        }\n      } catch (error) {\n        console.error('Error fetching sender data:', error);\n        setSenderName('Unknown');\n      }\n    };\n    fetchSenderName();\n  }, [message.sender]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Content: \", message.messageText]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Sender: \", senderName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), !messageSent && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Reply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newReplyContent,\n        onChange: e => setNewReplyContent(e.target.value),\n        placeholder: \"Type your reply...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendReply,\n        children: \"Send Reply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageItem, \"VZWPMTPjSzA/suk4DDDFoBJR8uk=\");\n_c = MessageItem;\nconst DoctorPage = () => {\n  _s2();\n  const [patients, setPatients] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [getAllSentMessages, setAllSentMessages] = useState([]);\n  const [getAllReceviedMessages, setAllReceviedMessages] = useState([]);\n  const [selectedPatient, setSelectedPatient] = useState(null);\n  const [searchedPatients, setSearchedPatients] = useState([]); // State för sökta patienter\n\n  const fetchMessages = async userId => {\n    try {\n      console.log(userId);\n      ApiServices.getAllSentMessagesForUser(userId).then(setAllSentMessages);\n      ApiServices.getAllReceivedMessagesForUser(userId).then(setAllReceviedMessages);\n      console.log(getAllSentMessages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const handleSearchComplete = searchResults => {\n    console.log(searchResults);\n    setSearchedPatients(searchResults); // Spara sökresultaten i state\n    //console.log(searchResults)\n  };\n\n  useEffect(() => {\n    // Fetch list of patients when the component mounts\n    const fetchPatients = async () => {\n      try {\n        const fetchedPatients = await ApiService.getPatients(); // Fetch patients from API\n        setPatients(fetchedPatients); // Set the fetched patients in state\n      } catch (error) {\n        console.error('Error fetching patients:', error);\n      }\n    };\n    const userIdFromSession = sessionStorage.getItem('currentUserLoggedIn');\n    if (userIdFromSession) {\n      const {\n        userId\n      } = JSON.parse(userIdFromSession);\n      fetchMessages(userId); // Fetch messages for the logged-in doctor (using userId)\n    }\n\n    fetchPatients();\n  }, []);\n  const handleReply = async (receiverId, replyContent) => {\n    try {\n      if (replyContent) {\n        const userIdFromSession2 = sessionStorage.getItem('currentUserLoggedIn');\n        let senderId = 0;\n        if (userIdFromSession2) {\n          const {\n            userId\n          } = JSON.parse(userIdFromSession2);\n          senderId = userId;\n        }\n        // Here, you can set the selectedPatient based on the receiverId\n        const selectedPatient = patients.find(patient => patient.id === receiverId);\n        setSelectedPatient(selectedPatient || null);\n        const messageData = {\n          messageText: replyContent,\n          timeStamp: new Date().toISOString(),\n          sender: senderId,\n          receiver: receiverId\n        };\n        await ApiService.createMessage(messageData);\n\n        // Fetch updated messages for the logged-in doctor after sending the reply\n        const userIdFromSession = sessionStorage.getItem('currentUserLoggedIn');\n        if (userIdFromSession) {\n          const {\n            userId\n          } = JSON.parse(userIdFromSession);\n          fetchMessages(userId);\n        }\n\n        //setNewMessageContent('');\n      } else {\n        console.error('Missing reply content or selected patient');\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: getAllReceviedMessages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(MessageItem, {\n          message: message,\n          handleReply: handleReply\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this)\n      }, message.timeStamp, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"List of Patients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: patients.map(patient => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [patient.firstname, \" - \", patient.id, /*#__PURE__*/_jsxDEV(Link, {\n          to: `/staff/selectedPatient/${patient.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Select Patient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this)]\n      }, patient.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Search For Patients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PatientSearchForm, {\n      onSearchComplete: handleSearchComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Searched Patients\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), searchedPatients.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: searchedPatients.map(patient => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 33\n          }, this), \" \", patient.firstName, \" \", patient.lastName, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 95\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 33\n          }, this), \" \", patient.email, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 73\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Gender:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 33\n          }, this), \" \", patient.gender]\n        }, patient.lastName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No patients found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this) // Visa detta om inga träffar görs vid sökning\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n_s2(DoctorPage, \"5X1TLWN87xiz31ko4T163PE21DE=\");\n_c2 = DoctorPage;\nexport default DoctorPage;\n\n//<button onClick={() => handleReply(selectedPatient?.userId || 0)}>Reply</button>\nvar _c, _c2;\n$RefreshReg$(_c, \"MessageItem\");\n$RefreshReg$(_c2, \"DoctorPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","ApiService","ApiServices","PatientSearchForm","jsxDEV","_jsxDEV","MessageItem","message","handleReply","_s","newReplyContent","setNewReplyContent","senderName","setSenderName","messageSent","setMessageSent","handleSendReply","sender","alert","error","console","fetchSenderName","senderData","getPatientByUserId","name","children","messageText","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","DoctorPage","_s2","patients","setPatients","messages","setMessages","getAllSentMessages","setAllSentMessages","getAllReceviedMessages","setAllReceviedMessages","selectedPatient","setSelectedPatient","searchedPatients","setSearchedPatients","fetchMessages","userId","log","getAllSentMessagesForUser","then","getAllReceivedMessagesForUser","handleSearchComplete","searchResults","fetchPatients","fetchedPatients","getPatients","userIdFromSession","sessionStorage","getItem","JSON","parse","receiverId","replyContent","userIdFromSession2","senderId","find","patient","id","messageData","timeStamp","Date","toISOString","receiver","createMessage","map","firstname","to","onSearchComplete","length","firstName","lastName","email","gender","_c2","$RefreshReg$"],"sources":["C:/Users/Mohamad H/Desktop/KTH/TIDAA3/Fullstack/labbar/Front/FrontEnd/j-client/src/components/DoctorPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ApiService from '../services/ApiServices';\r\nimport {Patient, Msg, PatientForSearch} from \"../interface/interface\";\r\nimport ApiServices from \"../services/ApiServices\";\r\nimport PatientSearchForm from './PatientSearchForm';\r\n\r\ninterface MessageItemProps {\r\n    message: Msg;\r\n    handleReply: (receiverId: number, replyContent: string) => void;\r\n\r\n}\r\n\r\nconst MessageItem: React.FC<MessageItemProps> = ({ message, handleReply }) => {\r\n    const [newReplyContent, setNewReplyContent] = useState('');\r\n    const [senderName, setSenderName] = useState('');\r\n    const [messageSent, setMessageSent] = useState(false);\r\n\r\n    const handleSendReply = async () => {\r\n        try {\r\n            // Call handleReply and pass the receiver's userId and newReplyContent\r\n            await handleReply(message.sender, newReplyContent);\r\n            setMessageSent(true); // Set message sent to true after successful send\r\n            alert(\"Message successfully sent!\");\r\n            setNewReplyContent(''); // Clear the reply input after sending\r\n        } catch (error) {\r\n            console.error('Error sending message:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchSenderName = async () => {\r\n            try {\r\n                const senderData = await ApiServices.getPatientByUserId(message.sender);\r\n                if (senderData) {\r\n                    setSenderName(senderData.name || 'Unknown');\r\n                } else {\r\n                    setSenderName('Unknown');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching sender data:', error);\r\n                setSenderName('Unknown');\r\n            }\r\n        };\r\n\r\n        fetchSenderName();\r\n    }, [message.sender]);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <p>Content: {message.messageText}</p>\r\n            <p>Sender: {senderName}</p>\r\n            {/* Display other message details */}\r\n            {!messageSent && (\r\n                <div>\r\n                    <h4>Reply</h4>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={newReplyContent}\r\n                        onChange={(e) => setNewReplyContent(e.target.value)}\r\n                        placeholder=\"Type your reply...\"\r\n                    />\r\n                    <button onClick={handleSendReply}>Send Reply</button>\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DoctorPage = () => {\r\n    const [patients, setPatients] = useState<Patient[]>([]);\r\n    const [messages, setMessages] = useState<Msg[]>([]);\r\n    const [getAllSentMessages, setAllSentMessages] = useState<Msg[]>([]);\r\n    const [getAllReceviedMessages, setAllReceviedMessages] = useState<Msg[]>([]);\r\n    const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\r\n    const [searchedPatients, setSearchedPatients] = useState<PatientForSearch[]>([]); // State för sökta patienter\r\n\r\n\r\n    const fetchMessages = async (userId: number) => {\r\n        try {\r\n            console.log(userId)\r\n            ApiServices.getAllSentMessagesForUser(userId).then(setAllSentMessages);\r\n            ApiServices.getAllReceivedMessagesForUser(userId).then(setAllReceviedMessages);\r\n            console.log(getAllSentMessages)\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    };\r\n    const handleSearchComplete = (searchResults: PatientForSearch[]) => {\r\n        console.log(searchResults)\r\n\r\n        setSearchedPatients(searchResults); // Spara sökresultaten i state\r\n        //console.log(searchResults)\r\n    };\r\n    useEffect(() => {\r\n        // Fetch list of patients when the component mounts\r\n        const fetchPatients = async () => {\r\n            try {\r\n                const fetchedPatients = await ApiService.getPatients(); // Fetch patients from API\r\n                setPatients(fetchedPatients); // Set the fetched patients in state\r\n            } catch (error) {\r\n                console.error('Error fetching patients:', error);\r\n            }\r\n        };\r\n\r\n        const userIdFromSession = sessionStorage.getItem('currentUserLoggedIn');\r\n        if (userIdFromSession) {\r\n            const { userId } = JSON.parse(userIdFromSession);\r\n            fetchMessages(userId); // Fetch messages for the logged-in doctor (using userId)\r\n        }\r\n        fetchPatients();\r\n    }, []);\r\n\r\n    const handleReply = async (receiverId: number, replyContent: string) => {\r\n        try {\r\n            if (replyContent) {\r\n                const userIdFromSession2 = sessionStorage.getItem('currentUserLoggedIn');\r\n                let senderId = 0;\r\n                if (userIdFromSession2) {\r\n                    const { userId } = JSON.parse(userIdFromSession2);\r\n                    senderId = userId;\r\n                }\r\n                // Here, you can set the selectedPatient based on the receiverId\r\n                const selectedPatient = patients.find((patient) => patient.id === receiverId);\r\n                setSelectedPatient(selectedPatient || null);\r\n\r\n                const messageData = {\r\n                    messageText: replyContent,\r\n                    timeStamp: new Date().toISOString(),\r\n                    sender: senderId,\r\n                    receiver: receiverId,\r\n                };\r\n                await ApiService.createMessage(messageData);\r\n\r\n                // Fetch updated messages for the logged-in doctor after sending the reply\r\n                const userIdFromSession = sessionStorage.getItem('currentUserLoggedIn');\r\n                if (userIdFromSession) {\r\n                    const { userId } = JSON.parse(userIdFromSession);\r\n                    fetchMessages(userId);\r\n                }\r\n\r\n                //setNewMessageContent('');\r\n            } else {\r\n                console.error('Missing reply content or selected patient');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error sending message:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Messages</h2>\r\n            <ul>\r\n                {getAllReceviedMessages.map((message) => (\r\n                    <li key={message.timeStamp}>\r\n                        <MessageItem message={message} handleReply={handleReply}/>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            {/* Other components or sections */}\r\n            <h3>List of Patients</h3>\r\n            <ul>\r\n                {patients.map((patient) => (\r\n                    <li key={patient.id}>\r\n                        {patient.firstname} - {patient.id}\r\n                        <Link to={`/staff/selectedPatient/${patient.id}`}>\r\n                            <button>Select Patient</button>\r\n                        </Link>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <h3>Search For Patients</h3>\r\n            <PatientSearchForm onSearchComplete={handleSearchComplete} />\r\n\r\n            {/* Visa sökresultaten efter patients*/}\r\n            <div>\r\n                <h3>Searched Patients</h3>\r\n                {searchedPatients.length > 0 ? (\r\n                    <ul>\r\n                        {searchedPatients.map((patient) => (\r\n                            <li key={patient.lastName}>\r\n                                <strong>Name:</strong> {patient.firstName} {patient.lastName} <br/>\r\n                                <strong>Email:</strong> {patient.email} <br/>\r\n                                <strong>Gender:</strong> {patient.gender}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p>No patients found</p> // Visa detta om inga träffar görs vid sökning\r\n                )}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default DoctorPage;\r\n\r\n\r\n//<button onClick={() => handleReply(selectedPatient?.userId || 0)}>Reply</button>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}